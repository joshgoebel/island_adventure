##################################################
## Forgotten Island, written by Josh Goebel
##################################################

__game_name = Forgotten Island
__game_version = "0.9.0" # not yet releasted


start_at = washedashore
//template = talp
game_type = verb_noun


game_information {
	game_name = ${{__game_name}}
 	game_shortname = ForgotIsland
	written_by = Josh Goebel
 	uuid = cf74ec25-337d-454f-9a0c-273d4c6bb604
	year_of_release = 2022
	game_version = $${__game_version}
	copyright_message = Copyright (C) 2022 Josh Goebel. Not for commercial use. Do not redistribute.
	short_synopsis = Discover the secrets of a forgotten island
}

loading_screen = loading_graphic

//on_debug {
//}

on_startup {
  :set_theme "main_theme";
  :set_false "tutorial_on";

//  :gosub "title_screen";
//  :gosub "ask_fantasy_violence";
  :gosub "ask_tutorial";
  :gosub "bootup";

  :gosub "auto_music";  

  //:goto "beach";
  //:pocket "chest_key";
  //:pocket "candle";
  //:pocket "matchbook";
  :pocket "medallion";

  //:pocket "spyglass";
  //:goto "shipwreck";

  //:goto "cliffs_e_clearing";
  //:pocket "red_marble";
  //:pocket "blue_marble";
  //:goto "quiet_grove";
  //:goto "beach_ww";
  
  //:gosub "dream_of_storm";
  //:goto "quiet_grove";

  //:goto "village_square";
  //:goto "beach";
  //:goto "western_heights";
  //:pocket "chopped_oak";
  
  //:goto "cliffs_e_clearing";
  //:pocket "msg_bottle";
  //:goto "village_hut";
  //:pocket "oar";
  //:create "wolf";
  //:goto "cliffs_e_clearing";
}


######################################
#  Strings                           #
######################################

strings {
  str_arg1: string "";
  tmp_string: string "";
  status : string "" ;
  blank : string "";
  last_soundtrack : string "";
  soundtrack : string "";
  sound_volume: string "normal" scope="survivor";

  award_name: string "";
  prompt : string "[]: ";
  flower_color: string "yellow";
  lost_jungle_desc: string "";
  //treasure_score: string "{until_wave}";
  header_text : dynamic_string { ( "<" + h() + "<5>>")} ;
  //status_prompt : dynamic_string { (has_status ? status : blank) }
  status_prompt : dynamic_string {( "[]: " )}

  // changes after one sees the statue and gets the idea these might be eyes
  reminds_of_eye : dynamic_string {( " with dark veins running thru it" )}
  if_only_had_spyglass : dynamic_string {( !is_carried("spyglass") ? " If only you had a spyglass." : ""  )}
  jungle_room_description : dynamic_string {( "You're deep in the jungle.  Huge tropical trees surround you on all sides. It's easy to get lost here." )}
  beach_cave_description : dynamic_string {( is_candle_lit ? "There is nothing here." : "It's too dark to see much." )} 
  candle_lit_desc : dynamic_string {( is_candle_lit ? " (lit)" : "" )} 
}

######################################
#  Booleans                          #
######################################

booleans {
  tmp_bool: boolean "false";
  tutorial_on : boolean "true";
  is_debug: boolean "true";
  always: boolean "true";
  never: boolean "false";
  has_status: boolean "false";
  fantasy_violence_ok: boolean "false";
  has_set_initial_thirst: boolean "false";

  // system
  is_sound_muted: boolean "false";

  // is
  is_wolf_awake: boolean "false";
  is_candle_lit: boolean "false";
  is_flashback: boolean "false";
  is_reading: boolean "false";

  // has seen
  has_won_game: boolean "false";
  has_seen_cliff_steps: boolean "false";
  has_seen_wolf: boolean "false";
  has_visited_grove: boolean "false";
  has_dreamed_of_storm: boolean "false";
  has_seen_altar_flashback: boolean "false";
  dream_intro : boolean "false";
  
  knows_to_swim: boolean "false";

  // tutorial flags
  tut_look_debris: boolean "false";
  tut_look_gull: boolean "false";
  tut_eat_gull: boolean "false";
  tut_catch_gull: boolean "false";
  tut_look_around: boolean "false";
  tut_look_sand: boolean "false";

  // cutscenes
  cutsceen_grove_destroy_seen: boolean "false";
  cutsceen_plant_acorn_seen: boolean "false";
  cutsceen_signal_fire_seen: boolean "false";
  cutsceen_wizard_staff_seen: boolean "false";
}

integers {
  tmp_int: integer "0";
  max_achievements: integer "17";
  inventory_limit: integer "15" ;
  
  number_of_stones: integer "89";

  until_wave: integer "0";
  dream_counter : integer "0";
  thirst: integer "0";
  hunger: integer "0";
  lost_jungle_counter: integer "0";
  oar_hit_chest_count: integer "0";
  tutorial_progress: integer "0";
  wood_count: integer "0";

  kill_chance: integer "0";

  total_inputs: integer "0";
  total_looks: integer "0";
  total_rooms: integer "0";
}

collections {
  tmp_list : list;
  awards:set {
    items = []
  }
}


themes {

  dream_theme : theme {
    extends = main_theme
    colors {
      paper = "#333";
    }
  }

  main_theme : theme {

    lister_exits {
        exit_list_capitalization = lower
        experimental_enable_direction_arrows = false
        is_list_enter = true
    }
    lister_objects {
        experimental_auto_group_singular_objects = true
        list_type = "single_line_no_article"
    }

    lister_inventory {
        experimental_auto_group_singular_objects = true
    }

    system_messages {
      tutorial_message_prefix = ""
      // on_get = "You got it!"

      question_prompt_char = "choice?"
      object_list_end_text = ""
      exit_list_end_text = ""
      inventory_list_header        = "CARRYING: "
      inventory_list_empty         = "<NOTHING<10>>"
      // exit_list_end_text = " {status}"
      //prompt = ">>xx "
      prompt_expression = status_prompt
      prior_prompt = "{ has_status ? `({status})` : blank }"
      //object_list_header = "<…<#888>> "
      //object_list_header = "<you see:<#777>> "
      object_list_header = "<seen:<#777>> "
      object_list_separator = " , "
      //exit_list_header_concise= "<+<#666>>
      //exit_list_header_concise= "<obvious exits: <#777>>"
      exit_list_header_concise= "<exits: <#777>>"
      exit_list_sep_verbose = ", "
      
    }

    colors {
      //yousee_item_pen = 5
      status_bar_paper = #36c
      //  exit_list_item_pen = #999
      pen = 7
      exit_list_item_pen = #393
      exit_list_punctuation_pen = #fff
      tutorial_pen = 4
      border = 0
      header_pen = 5
    }

    //status_bar {
      // : header_text;
      // : treasure_score;
      // : dynamic_text "score_topright" ;
    //}

    //extends = two
    screen {
      // padding_horz                 = 24
      status_bar_padding_bottom = 1
      status_bar_padding_top = 1
      
      // padding_horz = 0
    }

    theme_settings {
      //capitalization   = upper
      textbox_capitalization = original
      font = userfont_antic
      columns = 65
      // space_normalization = raw
      redescribe = auto_beta
      //clear_screen_enable = false
      enable_prior_prompt = true
      success_jingle  = on
      // wingame_jingle  = on
      failure_jingle  = on
      // layout  = SB G D X O SEP "adv_line_red" LOCK
      //layout = SB G LOCK D O X
      layout =  P* "header_text"- G D- X O 
      keyboard_click  = off
      default_delay = 0
      parser_delay = 300
    }
  }
}

on_describe {
  :if (is_at("reception")) { 
    :tutorial "When ready to depart, type <THE END<6>> at any time to finish.";
  }
}

locations {
  placeholder: location "dummy location for fake connections";
  reception: location "The small cast of this grand narrative stands before you." header ="Meet and Greet" {
    on_command {
      :if (is_present("r_stranger")) {
        :match "talk stranger; look stranger" {
          :if (verb_is("talk")) {
            :append "You approach the stranger.";
          }
          :examine;
          :print "<As you stare, smoke rises; then a sudden bright flash... and he's gone.<13>>";
          :press_any_key;
          :print "...in his place stands the wizard.";
          :swap o1="r_stranger" o2="r_wizard";
        }
      }
      :match "shake hand; shake hands" {
        :print "You walk about shaking hands with everyone, the wolf even raises his paw for you.";
        :print "The seagull merely looks at you quizically.";
      }
      :match "the end" {
        :gosub "the_end";
      }
      :match "kiss wolf" {
        :print "You lean in for a kiss...";
        :press_any_key;
        :print "...the wolf happily licks your face and slobbers all over you.";
      }
      :match "pet wolf" {
        :print "You pet the wolf and rub in behind the ears affectionately.";
        :print "It whines happily then gives you a growl just for show.";
      }
      :match "hug wolf; snuggle wolf; cuddle wolf" {
        :print "You squeeze the wolf tight.  It's fur is incredibly warm and soft.";
        :print "You let go right as things were about to start getting awkward.";
      }
      :match "talk wizard" {
        :print "I'm quite pleased to make your acquaintance.";
        :print "Sorry about my 'pitiful pet' smack down earlier, merely playing my role to the fullest, ya know how it is.";
      }
      :match "talk firstmate" {
        :print "Ahoy, mate.";
      }
      :match "talk captain" {
        :print "It was my honor to be your captain thru the storm.";
        :print "Remember... I told ya \"We'll be fine\", didn't I?";
        :print "<The captain winks.<13>>";
      }
      :match "ask tree" {
        :print "<question. done.<14>>"; :done; 
      }
      :match "talk tree" {
        :print "<greet you. pleased.<14>>"; :done; 
      }
      :match "talk wolf; talk seagull; talk ape" {
        :examine;
      }
    }
  }

  // beach
  beach: location "A beach of beautiful white sand extends along the shoreline to the east and west.  Further to the north is the jungle." header="Southern Shore" {
    on_command {
      :match "search debris" {
        :examine;
      }
    }
  };
  beach_w: location "A beach of beautiful white sand." header="Southern Shore";
  beach_ww: location "A beach of beautiful white sand. There is a rocky outcropping to the north." header="Southern Shore";
  beach_e: location "A beach of beautiful white sand." header="Southern Shore";
  beach_ee: location "A beach of beautiful white sand." header="Southern Shore";
  beach_ww_rocky: location "A small crevice disappears downwards into the rock." header="Rocky Outcropping" {
    on_command {
      :match "go crevice; enter crevice; wiggle crevice" {
        :goto "beach_ww_cave";
      }
    }
  };
  beach_ww_cave: location "You are standing in a small cave. {beach_cave_description}" header="Small Cave" {
    on_tick {
      :if (is_candle_lit && is_beside("shadow_bear")) {
        :print "As the light fills up the small room, the bear disappears; it was just a shadow.";
        :destroy "shadow_bear";
        :press_any_key;
        :redescribe;
      }
    }
  }
  
  waters_edge : location "You washed ashore here. Further south out to sea a half sunken shipwreck rises from the waves." header="Water's Edge" {
    on_command {
      :match "look waves; look sea" { :print "The waves look a bit angry."; };
      :match "x ship; x shipwreck; x south; x flag" {
        :print "A black skull and crossbones flutters in the wind. You wonder if you could swim that far.";
      };
      :match "south _" { 
        :if (is_worn("medallion") && knows_to_swim) {
          :print "You swim out to the ship.";
          :goto "shipwreck";
          :press_any_key;
        } :else {
          :print "How? You can't exactly walk to the ship."; 
        }
      };
      :match "swim _" {
        :if (is_worn("medallion")) {
          :set_true "knows_to_swim";
          :print "You swim out to the ship.";
          :goto "shipwreck";
          :press_any_key;
        }
        :else {
          :print "It's pretty far out.  You aren't feeling strong or lucky enough at the moment." ;
        }
      }
    }
  };

  washedashore  : location "You wake up with a mouth full of sand; your body half in, half out of the cold sea.  You have never been happier to be alive." header="The Cold Sand" {

    on_command {
        :match "n _; stand _" {
          :print "You can barely stand. Perhaps crawl?";
          :failure;
        };
        :match "look *; examine *" {
          :print "You can't see anything from how you're laying but sand.";
          :done;
        }
        :match "s _" { :print "How? Swim?  Perhaps another day.";};
        :match "spit _" { :print "You spit out some sand. You're very thirsty."; };
        :match "swim _" { :print "You aren't feeling that lucky." ; };
        :match "x sea" { :print "You're flat on your face, but it's cold.";};
        :match "crawl _" {
          :print "You claw your way slowly out of the water and onto dry land...\n ...then collapse exhausted.";
          :success;
          :if (tutorial_on) {
              :tutorial "Exactly! This game uses a simple parser; commands are 1 or 2 words, always. Most commands will be verb/noun pairs, such as <EAT FOOD<6>> or <ATTACK BEAR<6>>.";
          }
          :press_any_key ;
          :clear_screen;

          :print "Some time later...";
          :press_any_key ;
          :if (!tutorial_on) {
            :set_true "has_set_initial_thirst";
            :set_integer var="thirst" value="75";
            }
          :goto "beach";
        }
    }
  };

  // village
  village_square: location "The village surrounds you on all sides, but it's far too quiet - like a ghost town." header="Village Square" {
    on_command {
      :match "get fruit; get fabric; look fruit; look fabric" {
        :print "It's far too old and decayed to be of any use.";
      }
      :match "x ghost" {
        :print "No ghosts here.";
        :set_string var="award_name" text="Ghost Busters";
        :gosub "give_award";
      }
      :match "drop stone; drop pebble; drop rock" {
        :print "You find a small pebble nearby and drop it into the well.  You hear a splash.";
        :set_string var="award_name" text="Wishing Well";
        :gosub "give_award";
      }
    }
  }
  village_n: location "To the north stands a large hut." header="Village" {
    on_command {
      :match "go hut" {
        :goto "village_hut";
      }
    }
  }
  village_s: location "Small huts surround both sides of the street." header="Village";
  village_e: location "Small huts surround both sides of the street." header="Village";
  village_w: location "Small huts surround both sides of the street." header="Village";
  village_hut: location "This hut is homey, yet spacious - larger than the others. A thick layer of dust covers everything." header="Village, Elder's Hut" {
    on_command {
      :match "x dust" {
        :print "You swipe your finger across the top of a surface.  Yep, dusty.";
      }
      :match "enter fireplace" {
        :print "It's small and you wouldn't fit.  You don't possess the Christmas magics.";
        :set_string var="award_name" text="Jolly Old St. Nicholas";
        :gosub "give_award";
      }
      :match "sit bed" {
        :print "It's more comfortable than you expected.";
      }
      :match "sleep bed" {
        :print "Ok, but just a quick nap...";
        :print "Zzzz...";
        :press_any_key;
        :redescribe;
      }
    }
  }

  // jungle
  jungle_edge: location "A small footpath leads north into the jungle.  To the south is the beach." header="Jungle's Edge" {
    on_command {
      :match "look water; drink water; get water" {
        :print "There is no water here, you'll need to find some elsewhere.";
      }
    }
  }
  jungle_entrance: location "{jungle_room_description}" header="Jungle";
  jungle_w: location "{jungle_room_description}" header ="Jungle";
  // TODO: better description
  south_of_grove: location "Jungle surrounds you.  To the north is the sacred grove." header ="Jungle, Outside Grove" {
    on_command {
      :match "north _" {
        :if (!cutsceen_grove_destroy_seen) {
          :goto "quiet_grove";
          :done;
        }
      }
    }
  }
  jungle_ww: location "{jungle_room_description}" header ="Jungle";
  jungle_e: location "{jungle_room_description}" header ="Jungle";
  jungle_ee: location "{jungle_room_description}" header ="Jungle";
  jungle_ne: location "{jungle_room_description}" header ="Jungle";
  jungle_n: location "{jungle_room_description}" header ="Jungle";
  jungle_nw: location "{jungle_room_description}" header ="Jungle";
  jungle_exit: location "{jungle_room_description}" header ="Jungle";
  lowlands: location "There is a small village here." header="Lowlands" {
    on_command {
      :match "go village" {
        :goto "village_s";
      }
      :match "look village" {
        :examine;
      }
    }
  }
  sloping_hills: location "Gently sloping hills rise up to great heights further west. You see a village further east." header="Sloping Hills";
  western_heights_dream_e: location; // dummy exit to the east
  western_heights_dream: location "A full moon hangs high above.  The wind whips at you, threatening to cast you off the cliff and into the sea." header="Western Heights" {
    on_command {
        :match "touch altar" { 
          :print "Touching the altar brought you here, but it does not seem to be how you must return...";
          :done;
        }
        :match "listen spell; listen incantation; listen words; listen _" {
          :print "You can't make out the words.";
        }
        :match "east _" {
          :print "You can't seem to physically move from this place.";
          :print "Yet somehow you are certain you could leave at anytime, merely by closing your eyes.";
        }
        :match "close eyes; shut eyes; blink eyes" {
          :print "You close your eyes... slowly the cold wind and rain recede until there is only silence...";
          :press_any_key;
          :set_theme "main_theme";
          :gosub "main_music_theme";  
          :goto "western_heights";
        }
        :match "look injury" {
          :print "You're not certain of the injury, but the wolf looks like it's in pain.";
        }
        :match "save wolf; help wolf; free wolf; unbind wolf" {
          :print "The urge to intervene is strong...";
          :print "Yet some part of you knows these events cannot be changed.";
        }
        :match "attack wizard; fight wizard; hit wizard; stop wizard; throw knife; stab wizard; kill wizard" {
          :print "The urge to intervene is strong...";
          :print "Yet some part of you knows these events cannot be changed.";
        }
    }
  }
  western_heights:  location "This seems to be the highest point of the entire island, allowing you to see for miles.{if_only_had_spyglass}" header="Western Heights" {
    on_tick {
        :match "look altar" {
          :if (!has_seen_altar_flashback) {
            :print "<You have a sudden desire to touch the altar.<#9f9>>";
          }
        }
        :match "x view; x point" {
          :print "The highest point of the island, the view is spectacular.";
          :done;
        }
        :match "look crack" {
          :if (has_not_created("red_marble")) {
              :print "Wait a minute...";
              :press_any_key;
              :print "There is something hiding at the very bottom of the crack.";
              :press_any_key;
              :create "red_marble";
              :print "<you notice:<#777>> red marble";
          }
        }
    }
    on_command {
        :match "touch altar" {
          :print "You feel a strange tingling...";
          :press_any_key;
          :print "...then a sudden headache...";
          :press_any_key;
          :set_theme "dream_theme";
          :clear_screen;
          :print "...and suddenly you are here, but not here.";
          :goto "western_heights_dream";
          :set_true "has_seen_altar_flashback";
          :done;
        }
        :match "look down" {
          :print "It looks to be a sheer cliff dropping hundreds of feet to large rocks and angry ocean below.";
        }
        :match "look south" {
          :print "A white, sandy beach lays to the south.  Further out to sea a half sunken ship sits in the waves.";
        }
        :match "look north" {
          :print "The northern part of the island appears to be dense jungle. You can barely make out movement.";
        }
        :if (is_carried("spyglass")) {
          :match "spy north" {
            :print "Dense jungle.  You see a large ape swinging among the trees.";
            :set_string var="award_name" text="Planet of the Apes";
            :gosub "give_award";
            :done;
          }
          :match "spy shipwreck" {
            :print "A half-sunken pirate ship that's seen better days.";
            :done;
          }
          :match "spy village" {
            :print "A small rural village consisting of many huts.";
            :done;
          }
          :match "spy ocean; spy sea" {
            :print "Nothing but beautiful blue as far as the eye can see.";
            :done;
          }
          :match "spy down" {
            :print "Angry ocean beats agaisnt huge boulders, so close you can almost taste it.";
            :done;
          }
          :match "spy _" {
            :print "You spy nothing out of the ordinary.";
            :done;
          }
        }
        :match "look west" {
          :print "Ocean as far as the eye can see.";
        }
        :match "look east" {
          :print "The heights slowly slope back down slowly to gentle, rolling hills.";
        }
    }
  }
  cliffside_east: location "A three foot wide ledge, perhaps long enough that you could lay down, perhaps not. Vines cover much of the cliff face." header="Eastern Cliffs, Ledge" {
  on_command {
        :match "x vine; x vines" {
          :print "As thick as your arm.";
        }
        :match "swing vines; swing vine" {
          :print "Are you Tarzan now? Perhaps you might climb them though.";
          :set_string var="award_name" text="Tarzan";
          :gosub "give_award";
        }
        :match "go vines; climb vines; go vine; climb vines" {
          :goto "cliffs_e_vine_top";
        }
    }
  }
  cliffs_e_vine_top: location "You cling to the vine, it's a long way down. The safety of the ledge is beside you to the west." header="Eastern Cliffside";
  cliffs_e_vine_m: location "You cling to the vine, it's a long way down." header="Eastern Cliffside";
  cliffs_e_vine_b: location "You cling to the vine, it's still a long way down. A dark crevice seems to lead directly into the cliff." header="Eastern Cliffside";

  cliffs_e_cave_entrance: location "The passage narrows then heads downwards into the rock. Behind you are the vines." header="Eastern Cave";
  cliffs_e_cave_rear: location "The room is filled with treasure.  Too many chests to count, each one bursting with gold, gems, and precious metals." header="Eastern Cave" {
    on_command {
      :match "look dragon; find dragon" {
        :print "You search, but it seems there truly is no dragon standing guard.";
        :set_string var="award_name" text="Paranoid Much?";
        :gosub "give_award";
      }
    }
    on_tick {
      :set_string var="award_name" text="Treasure Island";
      :gosub "give_award";
    }
  };
  
  cliffs_e: location "The jungle ends abruptly with a two-hundred foot plunge to rocky shores below. There is no obvious way down." header="Eastern Cliffs" {
    on_command {
      :match "look shores" {
        :print "Rocky.";
      }
      :match "x cliff; x edge; x plunge; x down" {
        :print "You approach the edge and peek.  Seems like a long ways down...";
      }
    }
  };
  cliffs_e_clearing: location "You stand in a large clearing, bordered by dense jungle to the west. A huge boulder clings resolutely to the edge of the cliff." header="Eastern Cliffs,  Clearing" {
    on_tick {

    }
    on_command {
      :match "sit stone; sit stones" {
        :print "You sit down for a moment and ponder the life choices that led you to this point...";
      }
      :match "push boulder" {
        :print "It's massive.  It doesn't budge.";
        :if (!has_seen_cliff_steps) {
            :print "Something seems a little off.";
        }
      }
      :match "x cliff; x edge" {
        :print "You approach the edge and peek.  Seems like a long ways down...";
      }
      :match "count stones" {
        :print "24.";
      }
      :match "x circle" {
        :examine "circle_stones";
      }
      :match "x boulder" {
        :examine;
        :set_true "has_seen_cliff_steps";
      }
    }
  };

  lost_jungle_e: location "";
  lost_jungle_w: location "";
  lost_jungle_s: location "";
  lost_jungle_n: location "";
  lost_jungle: location "{lost_jungle_desc} You are lost." header="Deep in the Jungle";
  quiet_grove: location "You stand in a quiet grove filled with flowers. A single massive tree stands at the center." header="Quiet Grove";
  burnt_grove: location "You stand in a burnt grove filled full of nothing but ashes and acrid smoke." header="Burnt Grove" {
    on_command {
      :match "look staff; get staff" {
        :if(is_present("broken_staff")) {
          :gosub "cutsceen_wizard_staff";
          :gosub "win_game";
        }
      }
    }
  }

  dream_ship: location "You stand resolute at the helm as a wave unlike any you've ever seen rushes towards you. Your old grand-daddy told tales of waves like this - <ship killers<15>> he called them." header="The Storm" {
    on_tick {
      :match "look stranger" {
        :print "<You've been meaning to speak to them, but never found the time.<13>>";
      }
    }
    on_command {
        :match "pray _" {
          :print "\"Dear lord...\" You whisper your fearful request to a higher power and hope someone is listening. ";
          :set_string var="award_name" text="God-fearing";
          :gosub "give_award";
        }
        // prevent us from dropping things in the dream
        :match "drop _" {
          :print "You can't really drop anything in this place...";
        }
        :match "north _; south _; up _; east _; west _" {
          :print "You dare not leave your post.";
        }
        :match "up _" {
          :print "But why in the heck would you want to be up in the air in a storm like this?";
        }
        :match "down _" {
          :print "Retreating below deck sounds great, but you dare not leave your post.";
        }
        :match "hit captain; punch captain" {
          :print "You consider assuming command by force, but have second thoughts.  Is a mutiny truly the answer?";
          :set_string var="award_name" text="Bad boys, bad boys, what ya gonna do";
          :gosub "give_award";
        }
        :match "mutiny -;kill captain; attack captain" {
          :print "You reach for your knife... but have second thoughts.  Is mutiny truly the answer here?";
          :set_string var="award_name" text="Bad boys, bad boys, what ya gonna do";
          :gosub "give_award";
        }
        :match "abandon ship" {
          :print "No, duty compells you to stay.  That's the Captain's call, not yours.";
        }
        :match "walk plank; jump overboard; jump water; jump ship; swim _" {
          :print "Surely things aren't that bad yet?";
        }
        :match "look ship; look boat" {
          :print "The Drunken Revenge. She's gotten you thru thick and thin in the past - perhaps she'll pull thru yet.";
        }
        :match "x wave; x waves; x sea; x water" {
          :print "The wave approaching must be at least as tall as four of your own vessel stacked mast to mast. A huge wall of angry water.";
        }
        :match "piss pants; pee pants; wet pants; pee yourself; wet yourself" {
          :print "The firstmate looks at you a awkwardly.";
          :print "...but at least the warmth running down your leg briefly wards off the chill of the night air.";
        }
        :match "give speech" {
          :print "You clear your throat.";
          :press_any_key;
          :print "\"It's been an honor...";
          :pause millis = "1000" ;
          :print "...my friends\"";
          :pause millis = "1000" ;
          :print "You were never one for long speeches.";
        }
        :if (is_present("d_stranger")) {
          :match "talk stranger; speak stranger" {
            :print "(too far away without yelling)";
            :print "They stand at the railing, staring into the ocean, seemingly unbothered by the violence of the storm.";
          }
          :match "yell stranger; scream stranger; shout stranger" {
            :print "You yell, casting your voice towards the stranger.";
            :press_any_key;
            :print "Slowly they turn and you see eyes...";
            :pause millis = "1000";
            :print "...like staring into a deep, dark abyss with no bottom.";
            :press_any_key;
            :print "<A spider web of lightning flashes across the sky.<14>>";
            :print "...and when you look back the stranger is gone.";
            :destroy "d_stranger";
            :press_any_key;
            :print "Your momma always told ya get a grip on that overactive imagination of yours.";
            :press_any_key;
          }
        }
        :match "talk firstmate; speak firstmate; look firstmate" {
          :print "\"Ain't never me seen a storm like this, oh the stories we'll tell!\" says the first mate with a silly grin.";
        }
        :match "look helm" {
          :examine "d_wheel";
        }
        :match "look deck" {
          :print "You recall the beautiful, sunny days you spent swabbing that deck in the past. You should have appreciated them more.";
        }
        :match "look leviathan" {
          :print "You don't see one (yet), you just thought you heard one.";
          :print "Could also be your overactive imagination...";
        }
        :match "listen _" {
          :print "Wind. Rain. Waves. Shouts. Meows.";
        }
        :match "look cats" {
          :print "You notice several of the felines hiding under a tarp.";
        }
        :match "look tarp" {
          :print "Just a tarp. Cats are hiding under it.";
        }
        :match "look nest; look crowsnest" {
          :print "Up high above.  You can see it periodically when lightning flashes across the sky.";
        }
        :match "look killer" {
          :print "The only killer you see is the wave in the distance.";
        }
        :match "kiss captain; kiss firstmate" {
          :print "Is this really the right time to share your feelings?";
        }
        :match "talk captain; speak captain; look captain" {
          :print "\"Don't worry kid, we'll be fine,\" he boasts.";
          :press_any_key;
          :print "Yet you see the fear in his eyes.";
        }
        :match "turn wheel;spin wheel;steer ship;turn ship" {
          :print "You spin the wheel trying to alter course, but deep inside you know it won't matter.";
        }
        :match "close eyes; give up; wake _" {
          :print "You close your eyes and try to will yourself awake.";
          :set_integer var="until_wave" value="1";
        }
    }
  };
  dream_ship_placeholder: location ""; // fake room for dream ship connections

  // shipwreck rooms
  shipwreck: location "The ship is half sunken, but the skull and crossbones still flies high. To the north is the beach." header="Shipwreck";
  ship_crowsnest: location "The skull and crossbones still flies proudly in the wind." header="Crow's Nest";
  ship_captains: location "Half the room is submerged beneath dark water." header="Captain's Quarters" {
    on_command {
        :match "look water" {
          :print "You wonder what could be hiding beneath the surface.";
        }
        :match "swim water; check water; feel water; search water" {
          :if (has_not_created("chest_key")) {
              :print "You feel around beneath the water and grasp a small object.";
              :print "<you've found:<#777>> key";
              :create "chest_key";
              :done;
          } :else {
              :print "You feel around beneath the water, but find nothing.";
              :done;
          }
        }
    }
  }

  // flashbacks
}


objects {

  // RECEPTION
  r_seagull: scenery "seagull" at="reception" msg="The seagull slightly dips it's head as if taking a bow.";
  r_captain: scenery "<captain<#c6c>>" at="reception" msg="A patch covers one eye and a parrot rests on his shoulder. Yes, the captain is a bit stereotypical, but you'd never say that to his face.";
  r_firstmate: scenery "<first mate<#c6c>>" at="reception" msg="A bit of blond sandy hair escape from under a red bandana. His smile may be missing a few teeth, but is as still friendly as ever.";
  r_stranger: scenery "<stranger<#c6c>>" at="reception" msg="The frail old man wears in a dingy cloak.  He leans on a gnarled walking stick, as if it were a cane.";
  r_wizard: scenery "<wizard<#c6c>>" msg="He wears a black cape and grips a bloodwood staff.  He smiles and makes a very deep bow.";
  r_wolf: scenery "<wolf<#c6c>>" at="reception" msg="A dire wolf with a light grey mane and deep <golden<#fc3>> eyes.  It yips at you and wags its tail in a friendly fashion.";
  r_tree: scenery "ancient tree" at="reception" msg="It towers above you, with smooth white bark and light crimson blossoms.  Every so slowly the limbs drop a bit and then rise again.";
  r_ape: scenery "ape" at="reception" msg="The ape scratches it's head and looks back at you.";

  // VILLAGE
  //bucket: object "a bucket" at="village_square" msg="Likely used for drawing the water up from the well.";
  well: scenery "a well" at="village_square" msg="It looks like hasn't been used in some time. Seems deep.";
  vendor_booths: scenery "vendor booths" at="village_square" msg="You see the remains of fruit that rotted long ago and faded fabrics.";
  // elder hut
  bed: scenery "a bed" msg="A cozy small bed." at="village_hut";
  kettle: scenery "a kettle" msg="A large kettle hangs over the fireplace, smells like grandma's chili." at="village_hut";
  fireplace: scenery "a fireplace" msg="Looks like it hasn't been used in many years." at="village_hut";
  tome: object "a tome" msg="A large book, very old." at="village_hut";
  village: scenery "village" msg="Appears to be a small, primitive village, but it's too quiet.  You'll need to enter to learn more." at="lowlands";
  elder_hut: scenery "large hut" msg="The hut before you is larger than the rest, but otherwise similar." at="village_n";

  // western_heights_dream
  wounded_wolf: scenery "<wolf<#c6c>>" at="western_heights_dream" msg="The large creature is bound upon the altar and appears injured. It looks towards you, or is that merely your imagination?";
  evil_wizard: scenery "<wizard<#c6c>>" at="western_heights_dream" msg="He wears a black cape and holds a bloodwood staff. He is slowly speaking the words of some sort of incantation or spell.";
  bloodwood: scenery "bloodwood" at="western_heights_dream" msg="Very rare, from the Blood Forest. It is said that removing a single limb from that forest traps and binds the tree's soul to the wood for eternity." conspicuous="false";
  bloodwood_staff: scenery "a bloodwood staff" at="western_heights_dream" msg="The bloodwood staff is at 7 feet long and a dark redish brown. Red mists swirl inside the staff." conspicuous="false";
  wizard_cape: scenery "a cape" at="western_heights_dream" msg="The wizard's black cape is blowing about madly in the wind." conspicuous="false";
  moonstone_altar: scenery "moonstone altar" at="western_heights_dream" msg="A massive moonstone altar.  It glows a bright blueish yellow in the moonlight.";
  moon: scenery "moon" at="western_heights_dream" msg="A full moon; you swear it looms larger than usual." conspicuous="false";
  moonlight: scenery "moonlight" at="western_heights_dream" msg="The moonlight feels as if it carries a slight chill." conspicuous="false";
  d_sea: scenery "sea" at="western_heights_dream" msg="A stormy sea swirls and churns far below." conspicuous="false";
  blazing_bonfire: scenery "raging bonfire" at="western_heights_dream" msg="A massive bonfire lights the night, yet provides no warmth.";

  // western heights
  charred_ashes: scenery "charred ashes" at="western_heights" msg="Appears to be the remains of a large bonfire from many moons ago. This would be the perfect spot to build a signal fire.";
  stone_altar: scenery "stone altar" at="western_heights" msg="A massive moonstone altar. An impossible crack intersects it from top to bottom.";
  altar_crack: scenery "a crack" at="western_heights" msg="It almost looks as if it was violently torn in half. What forces could do such a thing?" conspicuous="false";
  altar_moonstone: scenery "moonstone" at="western_heights" msg="Slightly bluer than limestone; glows when exposed to moonlight; known to be almost indestructable. The superstitious say it posses magical properties." conspicuous="false";

  // sacred grove
  wolf: object "a <dire wolf<#c6c>>" at="quiet_grove" msg="A dire wolf with a light grey mane and deep <golden<#fc3>> eyes.";
  tall_tree: scenery "an ancient tree" at="quiet_grove" msg="It towers above you, with smooth white bark and light crimson blossoms. It could easily be thousands of years old - or older.";
  grove_flowers: scenery "flowers" at="quiet_grove" msg="You wander among the flowers. Such <impossible hues<#r>> and shades of color, and a rich smell of chocolate and sunshine.";

  // burnt out sacred grove
  burnt_tree: scenery "a dead tree" at="burnt_grove" msg="Dead. The life force you sensed before is gone.";
  //dead_wolf: scenery "<dead wolf<#c6c>>" at="burnt_grove";
  //dead_wizard: scenery "<dead wizard<#c6c>>" at="burnt_grove";
  broken_staff: object "a broken staff" msg="You wizard's staff is broken in half and powerless.";

  // dream ship
  // d_rope: object "a rope" at="dream_ship";
  d_captain: scenery "<captain<#c6c>>" at="dream_ship";
  d_firstmate: scenery "<firstmate<#c6c>>"  at="dream_ship";
  d_stranger: scenery "<stranger<#c6c>>" at="dream_ship" msg="A subject of debate among the crew.  They boarded at the last moment and have kept to themselves.  An old, gnarled walking stick never leaves their side.";
  d_wheel: scenery "ship's wheel" at="dream_ship" msg="The wheel is hand-crafted with the finest Darkwood from the Isle of blah blah blah... honestly you weren't paying all that much attention when the Captain blathered on and on about it during the tour.";
  d_plank: scenery "plank" at="dream_ship" msg="You've seen plenty walk it.";
  d_mast: scenery "mast" at="dream_ship" msg="It extends upwards into the dark night. You know someone is manning the crow's nest, but don't envy them.";
  
  vines: scenery "vines" at="cliffside_east" msg="As thick as your arm.";
  medallion: object "a silver medallion" msg="It's attached to leather cordage and seems cold to the touch." get_message = "You suddenly feel luckier." wearable="true" at ="cliffside_east";

  // wolf eyes
  red_marble: object "a red marble" msg="A small, smooth red pebble{reminds_of_eye}. It feels hot to the touch, as if it was alive.";
  blue_marble: object "a blue marble" msg="A small, smooth, blue pebble{reminds_of_eye}. It feels hot to the touch, as if it was alive.";

  // starter inventory
  your_pants: object "some pants" msg="Comfortable everyday sailor pants." wearable="true";
  your_earring: object "a gold earring" msg="A small silver teardrop earring" wearable="true";

  // beach
  footpath: scenery "footpath" at="jungle_edge" msg="A bit overgrown, but obviously it was once a well-worn path." conspicuous="false";
  jungle_beach: scenery "beach" at="jungle_edge" msg="The white sand glitters as if inviting you back to the safety of the beach." conspicuous="false";

  rocky_crevice: scenery "crevice" at="beach_ww_rocky" msg="It'd be tight, but you believe you could wiggle thru if you gave it a shot." conspicuous="false";
  rocky_rock: scenery "rock" at="beach_ww_rocky" msg="A large outcropping of rock extends onto the beach." conspicuous="false";
  pool :scenery "a pool" at="beach_ww_rocky" msg="A small pool of crystal clear water. You see your reflection - not one of your better days.";
  knife: object "a knife" at = "waters_edge" msg="It appears quite sharp.";
  oar: object "an oar" at ="beach_w" msg="A long rowboat oar; used for paddling.";
  broken_oar: object "a broken oar"  msg="Broken in half, useless.";
  coconut_trees: object "coconut trees" at="beach_w" msg="Coconuts are delicious. But they are up too high.";
  coconut: object "a coconut" msg="A delicious coconut.";
  seagull: scenery "seagull" at = "beach" msg="What a beautiful, delicious bird.";
  dead_seagull: scenery "dead seagull" msg="Your stomach rumbles loudly.";
  debris : scenery "random debris" at = "beach" msg="Assorted debris from the wreck. Nothing useful at the moment.";
  seashell : object "a seashell" at = "waters_edge" msg="Reminds you of picking up seashells as a child.";
  stone: object "a stone" msg="One of the stones from the strange pile.";
  pile_stones: scenery "a pile of stones" at ="beach_ee" msg="A pile of perhaps 100 smooth, rounded stones.";
  shadow_bear: scenery "huge black bear" at="beach_ww_cave";
  ships_wheel: scenery "the ship's wheel" msg="The ship's wheel. You must have never even let go - your grand-daddy would be so proud." at="waters_edge";

  bottle: object "a bottle" msg="A beautiful blue frosted glass bottle that looks as if it's been tossed on the waves for years.";
  bottle_message: object "a message" msg="It reads: \"Trapped on an island - send help.\"";
  msg_bottle: object "a bottle" at = "beach_w" msg="A beautiful blue frosted glass bottle that looks as if it's been tossed on the waves for years.  There is a message inside.";

  // chest
  chest: scenery "a locked chest" at="beach_e" msg="Massive solid oak chest (locked). Perhaps you could smash it open?";
  open_chest: scenery "an oak chest" msg="Massive solid oak chest. (open)";
  chest_key: object "a key" msg="A small, brass skeleton key."; // under the water
  gold_coins: object "gold coins" msg="A small handful of gold coins.";
  matchbook: object "a matchbook" msg="A small book of matches.";
  love_letters: object "love letters" msg="Poetry and love letters to the Captain's old girlfriend.";

  // wood
  driftwood : object "driftwood" at = "beach_ww" msg="Sunbleached and rough, been drifting a while.";
  chopped_driftwood : object "chopped driftwood" msg="A pile of chopped driftwood.";
  chopped_oak : object "chopped oak" msg="A pile of chopped oak.";
  chopped_darkwood : object "chopped darkwood" msg="A pile of chopped darkwood.";
  signal_fire: scenery "signal fire" msg="A huge blaze, it should be possible to see the smoke for miles.";

  // treasure
  
  treasure_treasure: scenery "treasure" at="cliffs_e_cave_rear" msg="So much treasure, you half expect to find a dragon lurking around the corner."; 
  treasure_chests: scenery "chests" at="cliffs_e_cave_rear" conspicuous="false" msg="There are far too many to count.";
  treasure_crown: object "a crown" at="cliffs_e_cave_rear" msg="Fit for a king, or at least a duke." wearable="true";
  treasure_gems: scenery "gems" at="cliffs_e_cave_rear" conspicuous="false" msg="So many gems...";
  treasure_metals: scenery "metals" at="cliffs_e_cave_rear" conspicuous="false" msg="Gold, silver, moonstone...";

  // jungle
  boulder: scenery "boulder" at="cliffs_e_clearing" 
    msg="It's massive.  Looking closer you notice that rough and uneven steps carved into the boulder lead downwards.";
  wolf_statue: scenery  "statue" at="cliffs_e_clearing" 
    msg="In the middle of the clearing is a statue of a massive wolf, every bit as tall as you.  Strangely, it appears to be missing its eyes.";
  wolf_statue2: scenery  "wolf statue" noun="statue"
    msg="In the middle of the clearing is a statue of a massive wolf, every bit as tall as you.  Strangely, it appears to be missing its eyes.";
  wolf_statue3: scenery  "wolf statue" noun="statue"
    msg="In the middle of the clearing is a statue of a massive wolf, every bit as tall as you. Its eyes are a dull gold color.";
  crumbled_statue: scenery  "crumbled statue" noun="statue"
    msg="The crumbled remains of the statue litter the clearing.";
  circle_stones: scenery  "circle of stones" msg="Two dozen large stones each the size of your head form a circle around the statue." at="cliffs_e_clearing";

  // sunken ship
  spyglass: object "a spyglass" at="ship_crowsnest" msg="A spyglass, good for looking long distances.";
  captains_logbook: object "captain's log" at="ship_captains" msg="This huge tome is where the Captain logged the missions.";
  candle: object "a candle{candle_lit_desc}" at ="ship_captains" msg="Just an ordinary candle, smells like honey.";
  charts: object "nautical charts" at="ship_captains" msg= "For now, scrap paper. Perhaps useful if you ever get off this island.";
  book: object "a book" at="ship_captains" msg ="Moby Dick";
  moby_book: object "Moby Dick (book)" msg="Moby Dick" noun="book";
  axe: object "an axe" at="shipwreck" msg="Good for chopping up wood, you suppose.";
  mast :scenery "mast" at="shipwreck" msg="The Crows Nest is up there.";

  // shady grove
  acorn: object "an acorn" msg="Looks like an acorn. Smells like an acorn.";

  // flashbacks
}

vocabulary {
   :verb / aliases = [exit, leave]
   :verb / aliases = [look, l]
   :verb / aliases = [spy, spyglass]
   :verb / aliases = [touch, feel]
   :verb / aliases = [talk, speak, greet]
   :verb / aliases = [get, take, grab, pickup]
   :verb / aliases = [yell, shout, scream]
   :verb / aliases = [push, shove]
   :verb / aliases = [wait, z]

   // nouns
   :noun / aliases = [pile, stones] // pile of stones
   :noun / aliases = [bird, seagull, gull]
   :noun / aliases = [log, logbook, tome]
   :noun / aliases = [tree, trees]
   :noun / aliases = [wood, driftwood, oak, darkwood]
   :noun / aliases = [shell, seashell]
   :noun / aliases = [matchbook, matches, match]
   :noun / aliases = [bonfire, fire]
   :noun / aliases = [marble, marbles, eye, eyes]
   :noun / aliases = [flowers, flower]
   :noun / aliases = [shipwreck, wreck, ship]
   :noun / aliases = [ocean, sea, waves]
   :noun / aliases = [path, footpath]
   :noun / aliases = [firstmate, mate]

  // directions
   :noun / aliases = [north, n]
   :noun / aliases = [south, s]
   :noun / aliases = [east, e]
   :noun / aliases = [west, w]
   }

connections {
  from, direction, to = [
    washedashore, north, placeholder,
    waters_edge, north, beach,
    waters_edge, south, shipwreck,

    // dream intro
    dream_ship, north, dream_ship_placeholder,
    dream_ship, south, dream_ship_placeholder,
    dream_ship, down, dream_ship_placeholder,
    dream_ship, up, dream_ship_placeholder,

    // shipwreck
    shipwreck, up, ship_crowsnest,
    shipwreck, down, ship_captains,

    // beach
    beach_ww, north, beach_ww_rocky,
    beach_ww_rocky, down, beach_ww_cave,
    beach, north, jungle_edge,
    beach, west, beach_w,
    beach, east, beach_e,
    beach_e, east, beach_ee,
    beach_w, west, beach_ww,

    // village
    lowlands,enter,village_s
    village_square,north, village_n
    village_square,east, village_e
    village_square,south, village_s
    village_square,west, village_w
    village_n,north, village_hut

    // jungle
    jungle_edge, north, jungle_entrance
    jungle_entrance,west, jungle_w
    jungle_w,west,jungle_ww
    jungle_entrance,north,jungle_e
    jungle_e,north,jungle_ne
    jungle_ne,east,jungle_ee
    jungle_ne,west,jungle_n
    jungle_n,west, jungle_nw
    jungle_nw,south,jungle_exit

    // lost jungle
    lost_jungle,west, lost_jungle_w
    lost_jungle,east, lost_jungle_e
    lost_jungle,south, lost_jungle_s
    lost_jungle,north, lost_jungle_n
    quiet_grove,south, jungle_ww 
    south_of_grove,north,burnt_grove

    jungle_exit,west,lowlands
    jungle_ee,east,cliffs_e
    lowlands,west,sloping_hills
    sloping_hills,west,western_heights
    cliffs_e,south,cliffs_e_clearing
    cliffside_east,up, cliffs_e_clearing

    // vines leading into the cliffside      
    cliffs_e_vine_top,west,cliffside_east
    cliffs_e_vine_top,down,cliffs_e_vine_m
    cliffs_e_vine_m,down,cliffs_e_vine_b
    cliffs_e_vine_b,enter,cliffs_e_cave_entrance

    cliffs_e_cave_entrance,down,cliffs_e_cave_rear

    // western heights flashback
    western_heights_dream,east,western_heights_dream_e
  ]
}

zones {
  village_zone : zone {
    locations = [
      village_square,
      village_n,
      village_s,
      village_e,
      village_w,
      village_hut
    ]
  }

  heights_zone: zone {
    locations = [
      western_heights,
      cliffs_e,
      cliffs_e_clearing
    ]
  }

  beach_zone : zone {
    locations = [
      beach,
      beach_e,
      beach_ee,
      beach_w,
      beach_ww,
      waters_edge
    ]
  }

  jungle_zone : zone {
    locations = [
      jungle_entrance,
      jungle_w,
      jungle_ww,
      jungle_e,
      jungle_ee,
      jungle_ne,
      jungle_n,
      jungle_nw,
      jungle_exit
    ]
  }
}

barriers {

   access_to_groves: block_path {
      from = "jungle_ww"
      to = "quiet_grove"
      block_when_not = has_visited_grove
      show_blocked_exit = false
   }

   east_cave_light: block_path {
      from = cliffs_e_cave_entrance
      to = cliffs_e_cave_rear
      block_when_not = is_candle_lit
      show_blocked_exit = true
      message = "It's too dark to proceed any further without a light source."
   }

   hidden_cliff: block_path {
     from = cliffs_e_clearing
     to = cliffside_east
     block_when_not = has_seen_cliff_steps
     show_blocked_exit = false
   }
   
   hidden_vines: block_path {
      from = cliffside_east
      to = cliffs_e_vine_top
      block_when = always
      show_blocked_exit = false
   }

   swim_to_ship: block_path {
      from = waters_edge
      to = shipwreck
      block_when_not = knows_to_swim
      show_blocked_exit = false
   }
}

// map

//         VVV  J  -  J  -  J - J - E
//          V   |           |       |
//  W - . - . - J   Grove   J       E
//                  !       |
//                  J - J - J 
//                          |
//                  B - B - B - B - B
//                          |
//                        Wreck 
// J = Jungle
// B = Beach
// W = Western Heights
// E = Eastern Cliffs
// V = Village

on_command {
  :gosub "sentence_rewriting";

  :if (inputs() > 2) {
    :print "This game requires only two word inputs.";
    :done;
  }

  :match "help -" { :gosub "help"; }

  // HELP FOR USE *

  :match "cheat map" {
    :print "^n^\s        VVV  J  -  J  -  J - J - E";
    :print "^n^\s         V   |           |       |";
    :print "^n^\s W - . - . - J           J       E";
    :print "^n^\s                         |";
    :print "^n^\s                 J - J - J ";
    :print "^n^\s                         |";
    :print "^n^\s                 B - B - B - B - B";
    :print "^n^\s                         |";
    :print "^n^\s                       Wreck ";
    :print "^n^\sJ = Jungle";
    :print "^n^\sB = Beach";
    :print "^n^\sW = Western Heights";
    :print "^n^\sE = Eastern Cliffs";
    :print "^n^\sV = Village";
  }

  :match "use *" {
    :print "Objects may not be \"used\". Please try a different verb/noun.";
    :tutorial "For example, you might try:\n";
    :tutorial "- <unlock chest<6>> instead of <use key<6>>";
    :tutorial "- <light candle<6>> instead of <use match<6>>";
    :tutorial "- <spy north<6>> instead of <use spyglass<6>>";
    :done;
  }

  :match "look around" {
    :print "Looking 'around' doesn't work.\nInstead, try just <look<6>> or <look object<6>>.";
    :done;
  }

   // TUTORIAL

  :match "tutorial off" {
    :set_false "tutorial_on";
    :if (!has_set_initial_thirst) {
      :set_true "has_set_initial_thirst";
      :set_integer var="thirst" value="75";    
    }
    :tutorial "Tutorial turned off.";
    :done;
  }

  :match "tutorial on" {
    :set_true "tutorial_on";
    :tutorial "Tutorial turned on.";
    :done;
  }

  // VILLAGE

  :if (is_at("village_zone")) {
    :match "look hut; look huts" {
    :print "The huts appear to be made of a mixtures of straw, mud, and stone.";
      :if (is_at("village_n")) {
        :examine;
        //:print "The hut before you is larger than the rest, but otherwise similar.";
        :done;
      }
    }
    :match "knock huts" {
      :print "No one is home.";
    }
  }

  // CANDLE

  :if (is_carried("candle")) {
    :match "light candle" {
      :if (is_carried("matchbook")) {
        :print "You light the candle.";
        :set_true "is_candle_lit";
        :press_any_key;
        :redescribe;
      } :else {
        :print "Light it with what? You have no matches.";
      }
    }

    :match "blow candle; extinguish candle" {
      :if (is_candle_lit) {
        :print "You blow the candle out.";
        :set_false "is_candle_lit";
      } :else {
        :print "Why? It's not lit.";
      }
    }
  }

  // manual aliases
  // TODO: fix with real aliases?
  :if (is_beside("gold_coins")) {
      :match "get gold" {
          :get "gold_coins";
        }
    :match "look gold" {
        :examine "gold_coins";
    }
  }

  // LOVE LETTERS

  :if (is_present("love_letters")) {
    :match "read letters; read poetry" {
      :print "You grab a letter and read:";
      :press_any_key;
      :print "^c^Brandy,";
      :pause "1000";
      :print "^c^you're a fine girl,";
      :pause "1000";
      :print "^c^what a good wife you would be,";
      :pause "1000";
      :print "^c^your eyes could steal this sailor from the sea,";
      :pause "1000";
      :print "^c^but my life,";
      :pause "1000";
      :print "^c^my lover,";
      :pause "1000";
      :print "^c^my lady...";
      :pause "1000";
      :print "^c^...is the sea.";
      :pause "1000";
      :print "\nYou blush and decide to read no more.\nYou never knew the Captain was such a lady's man.";
    }
  }
  // SPYGLASS

  :if (is_carried("spyglass")) {
    // western heights are handled elsewhere
    :if (is_at("cliffs_e") || is_at("cliffs_e_clearing")) {
      :match "spy north; spy east; spy ocean" {
        :print "Ocean as far as the eye can see.";
      }
      :match "spy south; spy west" {
        :print "You can't, the view is blocked by jungle.";
      }
    } :else {
      :match "spy _" {
        :print "You'll too low to spy much here, try again from a greater height.";
      }
    }
  }

  // MATCHBOOK

  :if (is_carried("matchbook")) {
    :match "light match" {
      :print "The match burns out almost as quickly as you light it.";
    }
  }

   // ACORN

  :if (is_carried("acorn")) {
    :match "plant acorn" {
      :print "You somehow feel this isn't the time.";
    }
  }

   // SIGNAL FIRE

  
  :if (is_at("western_heights")) {
    :match "place wood" {
      :drop;
    }
    :match "light fire; set fire; start fire; make fire; build fire; set fire; burn wood" {
      :set_integer var ="wood_count" value="0";
      :if (is_beside("chopped_driftwood")) { :add var="wood_count" value="1"; }
      :if (is_beside("chopped_oak")) { :add var="wood_count" value="1"; }
      :if (is_beside("chopped_darkwood")) { :add var="wood_count" value="1"; }
      :if (is_beside("oar")) { :add var="wood_count" value="1"; }
      :if (is_beside("broken_oar")) { :add var="wood_count" value="1"; }
      :if (wood_count < 2) {
        :if (wood_count == 0) {
          :print "And burn what? The ashes?";
        }
        :print "For a good sized fire you'll need at least two bundles of wood.";
        :done;
      }
      :if (!is_beside("love_letters") && !is_beside("charts") && !is_beside("moby_book"))
      {  
        :print "You'll need some sort of paper to get the fire started.";
        :done;
      }
      :if (!is_carried("matchbook")) {
        :print "You need matches or some way to ignite the fire.";
        :done;
      }

      :if (is_beside("chopped_driftwood")) { :destroy "chopped_driftwood"; }
      :if (is_beside("chopped_oak")) { :destroy "chopped_oak"; }
      :if (is_beside("chopped_darkwood")) { :destroy "chopped_darkwood"; }
      :if (is_beside("oar")) { :destroy "oar"; }
      :if (is_beside("broken_oar")) { :destroy "broken_oar"; }

      :create "signal_fire";
      :if (is_beside("love_letters")) { :destroy "love_letters"; }
      :else_if (is_beside("charts")) { :destroy "charts"; }
      :else_if (is_beside("moby_book")) { :destroy "moby_book"; }
      
      :set_string var="award_name" text="Signal Fire";
      :gosub "give_award";
      :done;
    }  
  }

  :if (is_carried("matchbook")) {
    :match "light fire; set fire; start fire; make fire" {
      :print "Why would you do that here?";
    }
  }

   // MOBY DICK

  :if (is_present("book") || is_present("moby_book")) {
    :match "read book" {
      :print "Great idea.";
      :print "You'll put that on your list; just as soon as you get off this island.";
      :set_string var="award_name" text="Bookworm";
      :gosub "give_award";
    }
    :match "look book" {
      :examine;
      :swap o1="book" o2="moby_book";
    }
  }

   // THE TOME

   :if (is_present("tome")) {
      :match "get tome" {
        :print "You cannot.  Some magic ties it to this place.";
      }
      :match "read tome; open tome" {
        :set_true "is_reading";
        :while (is_reading) {
          :clear_screen;
          :print "^n^<Elder's Hut - reading<5>>";
          :print "You sit down on the bed and slowly thumb thru the pages.";
          :add_choice "a final stand" {
            :print "I depart now to face the wizard with what little courage and magics I possess.";
            :print "...I fear both shall be insufficient.";
          }
          :add_choice "the wolf" {
            :print "The wolf is as old as time; protector of our people, guardian of the island and sacred grove.";
          }
          :add_choice "the wizard" {
            :print "This dark figure has held many names and his tales would fill many books.";
            :print "The wizard tricked the wolf, gouged its eyes (stealing its powers), and then placed it into a dark, dreamless slumber.";
          }
          :add_choice "a sacred grove" {
            :print "There stands a wise, sacred tree in the center of the island that we worship.";
            :print "Surely the way to the grove will remain elusive to the wizard. It must.";
          }
          :add_choice "my people" {
            :print "I do not know what has become of my people.";
            :print "I fear I will never know.";
          }
          :add_choice "a hero foretold" {
            :print "All of this was long ago foretold... also that one day a hero would come - to right the old wrongs.";
            :print "Seek the wolf... and perhaps then the tree would offer help...";
          }
          :add_choice "stop (I'm done reading)" { 
            :redescribe;
            :set_false "is_reading";
            :done; 
          }
          :choose "<a few stand out:<#666>>";
          :press_any_key;
        }
      }
   }

   :if (is_present("wolf")) {
      :match "look wolf" {
        :examine;
        :print "<The wolf matches your stare until you look away.<13>>";
      }
      //:match "ask wolf" {
      //   :print "What would you ask it?";
      //}
      :match "talk wolf" {
        :print "You prepare your best friendly animal voice.";
        :print "\"Hey there wolfy boy. Let's be friends.\"";
        :print "<The wolf just stares at you without understanding.<13>>";
      }
      :match "pet wolf; hug wolf; touch wolf" {
        :print "It doesn't look like it's desiring your affection at the moment.";
        :done;
      }
   }

   // WOLF STATUS - COMES TO LIFE

  :if (is_present("wolf_statue") || is_present("wolf_statue2") || is_present("wolf_statue3")) {
    // we need to alias wolf -> status before the wolf has arrived just to be nice
    :match "look wolf" {
      :if (is_present("wolf_statue")) { :examine "wolf_statue"; }
      :if (is_present("wolf_statue2")) { :examine "wolf_statue2"; }
      :if (is_present("wolf_statue3")) { :examine "wolf_statue3"; }
      :done;
    }
    :match "touch statue; pet wolf; touch wolf" {
      :print "The stone is smooth, yet also somehow... lifelike...?";
      :print "...as if you're feeling real fur, petting an actual wolf.";
      :done;
    }
  }
   :if (is_present("wolf_statue") || is_present("wolf_statue2")) {
      :match "look statue" {
        :examine;
        :if (is_present("wolf_statue")) {
          :swap o1 = "wolf_statue" o2="wolf_statue2";
        }
      }
      :match "insert eyes; place eyes; add eyes; put eyes; fill sockets; complete statue" {
        :if (is_present("red_marble") && is_present("blue_marble")) {
          :print "The stone eyes snap into place; their colors fading to a dull gold.";
          :print "<You imagine you feel powerful energies swirling about you.<13>>";
          :press_any_key;
          :print "The statue appears to be tensing it's muscles.";
          :press_any_key;
          :print "Suddenly the statue explodes into a cloud of dust and rubble, throwing you backwards...";
          :press_any_key;
          :print "...from inside the cloud two bright, <golden<#fc3>> eyes stare out at you...";
          :press_any_key;

          :destroy "wolf_statue"; 
          :destroy "wolf_statue2"; 
          :destroy "wolf_statue3";
          :create "crumbled_statue"; // crumbled statue
          :create "wolf" target="cliffs_e_clearing";

          :destroy "blue_marble";
          :destroy "red_marble";
          :set_true "is_wolf_awake";
          :set_true "has_seen_wolf";
          
        // we have either, but not both
        } :else_if (is_present("red_marble") || is_present("blue_marble")) {
          :print "<You imagine you hear a howl in the distance.<13>>";
          :print "You slowly insert your single marble, but it seems to do nothing... so you remove it."; 
          :print "Perhaps you need a pair?";
        }
      }
      :match "look eyes" {
        :print "The statue has no eyes, only empty sockets.  One socket is pale blue, the other a dark shade of red.";
      }
   }

   // THE SEAGULL

   :if (is_present("dead_seagull")) {
      :match "eat bird; cook bird; roast bird" {
        :print "You tear into the small, but delicious meal.";
        :set_string var="award_name" text="Perseverance";
        :gosub "give_award";
        :destroy "dead_seagull";
        :done;
      }
   }

   :if (is_present("seagull")) {
      :match "kill bird; attack bird" {
        :print "You imagine dinner, but first you'd have to catch it...";
        :done;
      }
      :match "get bird" {
        :print "First you'd need to catch it...";
        :done;
      }
      :match "eat bird; cook bird; roast bird" {
        :print "Yum, but first you'd have to catch it...";
        :done;
      }
      :match "catch bird" {
        :failure;
        :print "The seagull flies further away and looks back at you.";
        :print "You imagine it laughing, daring you to chase it.";
      }
      :match "chase bird; run bird" {
        :print "You chase the seagull in circles...";
        :press_any_key;
        :failure;
        :print "...until finally you collapse from exhaustion.";
        :print "How could you get the jump on this darn seagull?";
      }
      :match "jump bird; pounce bird" {
        :print "You wait until it seems distracted then jump...";
        :press_any_key;
        :failure;
        :print "...landing flat on your face in the sand.";
        :print "Is this gull impossible to surprise?";
      }
      :match "surprise bird" {
        :print "You really wish you knew how.";
        :print "In a fair fight you could knock it out with a quick one-two punch.";
      }
      :match "hit bird; punch bird; box bird" {
        :print "You swing...";
        :press_any_key;
        :failure;
        :print "...and a miss. Perhaps throw something at it?";
      }
      :match "throw knife; toss knife" {
        :if (is_beside(s1()) || is_carried(s1())) {
          :print {( "You throw " + d(s1()) + " at the seagull..." )} ;
          :press_any_key;
          :store_random var = "tmp_int";
          //:print {( tmp_int + "  " + kill_chance )};
          :if (kill_chance < tmp_int) {
            :if (is_worn("medallion")) {
              :add var="kill_chance" value="10";
            } :else {
              :add var="kill_chance" value="5";
            }
            :append "...and miss. ";
            :failure;
            :cycle key = "knife_misses" predictable_order = "false" skip_interval = "0"  {
              :print "But it was so close!" ;
              :print "Surely next time." ;
              :print "Never give up, never surrender." ;
              :print "You give yourself a pep talk.";
              :print "You should have tried harder for your boyscout hunting badge.";
              :print "Grrr!" ;
              :print "Ungh!" ;
              :print "Darn!" ;
            }
            :print "You retrieve your knife from the sand.";
            :print "The seagull is no longer amused.";
          } :else {
            :print "...and your blade flies true.";
            :success;
            :swap o1="seagull" o2="dead_seagull";
          }
          :done;
        }
      }
      :match "throw *; toss *" {
        //:print {( s1())};
        :if (is_beside(s1()) || is_carried(s1())) {
          :print {( "You throw " + d(s1()) + " at the seagull." )} ;
          :print "The seagull looks amused.";
          :if (is_carried(s1())) {
            :drop;
          }
          :done;
        }
      }
   }

  // BARRIERS

  :if (is_at("jungle_edge") && thirst > 50) {
    :match "north -" {
      :print "You're dying of thirst.\nYou really should look for water before venturing deeper inland.";
    }
  }

   // DELICIOUS COCONUTS

   // TODO: improve crack/open coconut

  :if (is_present("coconut_trees")) {
    :match "climb tree" {
      :print "No way, the coconuts are up way too high. There must be another way.";
    }
    :match "eat coconut" {
      :if (!is_present("coconut")) {
        :print "If only... they are up so high in the trees beyond your grasp.";
        :done;
      }
    }
    :match "shake tree; shake trees; wiggle tree; wiggle trees" {
      :print "You give it a good shake...";
      :if (is_exists("coconut")) {
        :print "... and nothing.";
        :if (is_present("coconut")) {
          :print "You've already shaken the coconut from the tree!";
        }
      } 
      :else {
        :press_any_key;
        :success;
        :print "A coconut falls from the tree.";
        :create "coconut";
      }
    }
  }

   :if (is_present("coconut")) {
      :match "crack coconut; split coconut; smash coconut; break coconut; open coconut" {
        :print "Your grand-daddy never taught ya to crack open a coconut.";
        :print "You could just cut into it with your trusty knife.";
        :if (!is_carried("knife")) {
          :print "...but where oh where is your trusty knife?";
        }
      }
      :match "stab coconut" {
        :if (is_carried("knife")) {
          :print "Geez!  You want to eat it, not kill it!";
        } :else {
          :print "Stab it with what?";
        }
      }
      :match "squeeze coconut" {
        :print "You squeeze the coconut until you're blue in the face.";
      }
      :match "eat coconut; cut coconut; slice cococut; pry coconut; knife coconut" {
        :if (is_carried("knife")) {
          :print "You cut into the coconut with your knife.\nDelicious.";
          :set_integer var ="hunger" value="0";
          :destroy "coconut";
          :print "You're less hungry, but still thirsty. Need agua.";
          :done;
        }
      }
      :match "cut coconut; slice coconut; pry coconut" {
        :if (!is_carried("knife")) {
          :print "Great idea, if only you had a knife!";
          :print "Where oh where is your trusty knife?";
          :done;
        }
      }
      :match "eat coconut" {
        :if (!is_carried("knife")) {
          :print "You need some way to get inside the coconut.";
          :done;
        }
      }
   }

  // THINGS YOU CANNOT HAVE

  :match "get wheel" {
    :if (is_present "ships_wheel") {
      :print "It's far too large to just carry around.\nBesides, what would you need it for?";
      :done;
    }
  }

  :match "push wheel; pull wheel; drag wheel; move wheel; roll wheel" {
    :print "That seems like a lot of work. Why? You can't imagine what you would need it for.";
    :done;
  }

  :if (is_present "driftwood") {
    :match "break wood; cut wood" {
      :print "If only you had a tool for that...";
    }
    :match "get wood; get driftwood" {
      :print "It's too large to carry as it is.\nYou'd first need to break it into smaller pieces.";
    }
  }

  // CHOPPING UP WOOD

   :if (is_carried "axe") {
      :match "chop wheel; split wheel; axe wheel" {
        :if (is_present "ships_wheel") {
          :print "You shed a tear as you chop.";
          :destroy "ships_wheel";
          :create "chopped_darkwood";
        }
      }
      :match "chop chest; split chest; axe chest" {
        :if (is_present("chest")) {
          :print "That might damage it's contents! Perhaps open it first?";
        }
        :if (is_present("open_chest")) {
          :print "You chop the chest into a neat pile of wood.";
          :destroy "open_chest";
          :create "chopped_oak";
        }
    }
    :match "chop wood; split wood; axe wood" {
      :if (is_present "driftwood") {
        :destroy "driftwood";
        :create "chopped_driftwood";
        :print "You chop the wood into smaller pieces.";
      }
    }
  }

   // THE LOCKED CHEST

  :if (is_present("open_chest")) {
    :match "lock chest; close chest" {
      :print "Why bother?";
    }
  } 
  :else_if (is_present("chest")) 
  {
    :match "open chest" {
      :print "It's locked.";
    }
    :match "unlock chest" {
      :if (!is_carried("chest_key")) {
        :print "You'll need the key.";
        :done;
      }
      :print "You insert the key.  It turns hesistantly, with a final loud click as the mechanism unlocks.";
      :press_any_key;
      :create "love_letters";
      :create "gold_coins";
      :create "matchbook";
      :create "blue_marble";
      :swap o1="chest" o2="open_chest";
    }
    :match "hit chest; whack chest; break chest; smash chest" {
      :if (is_carried("oar")) {
        :cycle key = "hit_chest" predictable_order = "true" skip_interval = "0" max_loops="1"  {
          :print "You give it a good hard whack with the oar.\nNothing. But perhaps you didn't swing hard enough?";
          :print "You swing harder.\nThat's it, it looks like perhaps it's giving.";
          :print "Third time's the charm?\nNope.";
          :print "The oar cracks in two.";
        }
        :increment "oar_hit_chest_count";

        :if (oar_hit_chest_count > 3) {
          :swap o1="oar" o2="broken_oar";
          :drop "broken_oar";
          :press_any_key;
          :redescribe;
        }
      } :else {
        :if (is_carried("broken_oar")){
          :print "Again? Seriously?";
        } :else {
          :print "You hit it as hard as you can.\nYour hand hurts.";
        }
      }
    }
  }
   
  // FOLLOW THE WOLF

  // is_at("jungle_ee")
  :match "follow wolf" {
    :if (is_at("cliffs_e_clearing")) {
      :print "Follow it where? It's just sitting there.";
    } :else {
      :print "<With one last look at you, the wolf plunges into the jungle.<13>>\n You rush after and are hopefully lost in only minutes.";
      :set_integer var = "lost_jungle_counter"  value = "0" ;
      :goto "lost_jungle";
    }
  }

   // LOST IN JUNGLE

  :if (is_at("lost_jungle")) {
    :match "look wolf; follow wolf" {
      :print "The wolf is just too fast, it knows the jungle.";
      :print "You've lost it's trail.";
    }
    :match "north -; south -; east -; west -" {
      :increment "lost_jungle_counter" ;
      :cycle key = "lost_events" predictable_order = "true" skip_interval = "0"  {
        :print "You are so very lost." ;
        :print "Every tree looks the same." ;
        :print "Wait, that Y shaped tree looks familiar." ;
        :print "Nope, just your imagination." ;
        :print "Fear starts to nibble at the corners of your mind." ;
      }
      :if (lost_jungle_counter>5) {
        :goto "quiet_grove";
        :create "wolf";
      }
      :press_any_key ;
      :redescribe;
    }
  }

   // QUIET GROVE / ANCIENT TREE

   :if (is_at("quiet_grove")) {

      :match "talk tree; speak tree" {
         :print "You have a feeling it's already listening.\nWhat would you <ask<6>> of it?";
      }
      :match "touch tree" {
        :print "You feel briefly feel connected with a life force impossible to describe or imagine.";
        :print "It's too much, and you jerk your hand away.";
        :done;
      }
      :match "ask tree" {
         :print "Ask it what?";
         :tutorial "Try <ask (subject)<6>> such as <ask weather<6>>.";
         :done;
      }
      :match "ask _" {
      : cycle key = "woods_events" predictable_order = "false" skip_interval = "0"  {
            :print "Wind whistles thru the branches." ;
            :print "Leaves rustle softly." ;
            :print "A gentle breeze; the branches dance." ;
            :print "The leaves whisper softly.";
            :print "Branches click and rattle in the wind.";
         }
      }
      :match "ask life" {
        :print "<fourty two<14>>"; :done; }
      :match "ask wisdom; ask patience; ask truth" {
        :print "<much good.<14>>"; :done; }
      :match "ask fire; ask earth; ask wind; ask water" {
        :print "<elemental. power.<14>>"; :done; }
      :match "ask love" {
        :print "<magic. deep.<14>>"; :done; }
      :match "ask altar" { :print "<tragic. necessary.<14>>";  :done; }  
      :match "ask acorn" { :print "<help. plant.<14>>";  :done; }
      :match "ask plant" { :print "<new life. good.<14>>";  :done; }
      :match "ask help" {
        :print "<help.<14>>";
        :print "A small acorn falls to the ground.";
        :create "acorn";
        :done; 
      }
      :match "ask flowers" {
        :print "<for others<14>>"; :done; }
      :match "ask island" {
        :print "<here<14>>"; :done; }
      :match "ask treasure; ask gold; ask money" {
        :print "<greed. sad.<14>>"; :done; }
      :match "ask wolf; ask dragon" {
        :print "<old ones<14>>"; :done; }
      :match "ask stranger" {
        :print "<evil one. many guises.<14>>"; :done; }
      :match "ask wizard" {
        :print "<evil one<14>>"; :done; }
      :match "ask people" {
        :print "<wizard slaves<14>>"; :done; }
      :match "ask ship; ask shipwreck" {
        :print "<bring hero<14>>"; :done; }
      :match "ask age" {
        :print "<long. ago. time.<14>>"; :done; }
      :match "ask name; ask who" {
        :print "<many names.<14>>"; :done; }
      :match "ask _" {
         :print "... silence ...";
      }

      :match "take flowers; pick flowers; get flowers" {
         :print "<The wolf growls as you reach towards a flower.<13>>";
         :print "You reconsider.";
      }

      :match "south -" {
        :if (is_carried("acorn")) {
          :print "You imagine you see a dark figure out of the corner of your eye...";
          :goto "south_of_grove";
        }
      }
   }

   :match "inv _" {
      :inventory;
      // buffs
      :if (is_worn("medallion")) {
      :append "buffs: ";
      :print "<luck<12>>";
      }
   }

  // THE MEDALLION

  :if (is_carried("medallion")) {
    :match "wear medallion" {
      :wear "medallion";
      :print "You shiver, but suddenly feel quite a bit luckier.";
    }
  }

  // JUST A SHADOW

  :if (is_present("shadow_bear")) {
    :match "look bear; touch bear; talk bear; attack bear; hit bear; stab bear" {
      :print "Nope, just a shadow.";
      :destroy "shadow_bear";
    }
  }

  // POOL OF WATER

  :if (is_present("pool")) {
    :if (is_carried("bottle")) {
      :match "get water; fill bottle" {
        :print "You seem to have lost the cork, oops.";
        :done;
      }
    }
    :if (is_carried("msg_bottle")) {
      :match "get water; fill bottle" {
        :print "The bottle already has something in it.";
        :done;
      }
    }
    :match "swim -; swim pool" {
      :print "You wish.  If only the pool was a bit larger...";
      :done;
    }
    :match "drink water; drink pool; drink _" {
      :set_integer var = "thirst" value = "0" ;
      :print "You didn't know water could taste this good.";
      :if (has_dreamed_of_storm) {
        :add_choice "dream again" { :set_false "has_dreamed_of_storm"; }
        :add_choice "no thanks, just the water" { :done; }
        :choose "You recall your memories of the storm...";
      }
      :if (!has_dreamed_of_storm) {
        :print "Refreshed, you close your eyes for just a brief moment...";
        :press_any_key;
        :print "And soon you're fast asleep...";
        :gosub "dream_of_storm";
      }
    }
  }

  // CAPTAIN'S LOG

  :if (is_present("captains_logbook")) {
    :match "read logbook" { // alias: log
      :print "Last entry:";
      :print "I worry we were deceived - that we will never find this dreaded island. Worse, I fear what might be waiting for us if we do.";
    }
  }

   // PILE OF STONES

  :if(is_present "pile_stones") {
    :match "x stone" {
      :if (!is_carried("stone")) {
        :print "You examine one stone.  It's a rock.";
      }
    }
    :match "count stones" {
      :print "You slowly and deliberately count each stone. There are exactly {number_of_stones}.";
      :set_string var="award_name" text="OCD";
      :gosub "give_award";
    }
    :match "get stones" {
      :print "No way you're going to carry them all.";
    }
    :match "get stone" {
      :if (has_not_created("stone")) {
        :add var="number_of_stones" value="-1";
        :print "You pocket one of the stones.";
        :pocket "stone";
      }
    }
  }

  // MESSAGE IN A BOTTLE

  :if (is_present("bottle")) {
  }

  :if (is_present("bottle_message")) {
    :match "read message; look message" {
      :examine;
      :set_string var="award_name" text="Message In a Bottle";
      :gosub "give_award";
      :press_any_key;
    }
  }

  :if (is_present "msg_bottle") {
    :match "throw bottle; toss bottle" {
      :print "You throw the bottle far out to sea.";
      :destroy "msg_bottle";
    }
    :match "read bottle" {
      :print "It has no label to read. There is a message inside.";
      //:if (tutorial_on) {
      //  :tutorial "Did you perhaps mean <read message<6>>?";
      //}
    }
    :match "smash bottle; break bottle" {
      :print "Why so violent? Did you consider just opening it?";
    }
    :match "read message; look message" {
      :print "It's still sealed inside the bottle. You'd first need to open the bottle.";
    }
    :match "get message; open bottle" {
      :print "You open the bottle and take out the message.";
      :swap o1="msg_bottle" o2="bottle";
      :if (is_carried("bottle")) {
        :pocket "bottle_message";
      } :else {
        :create "bottle_message";
      }
    }
    //:match "look message; read message; read note; open bottle" {
    //  :if (verb_is("open")) {
    //    :print "You open the bottle and read the note.";
    //  }
    //  
    //  //:print "It reads:\n  \"Trapped on an island. Send help.\"";
    //  :examine "bottle_message";
    //  :set_string var="award_name" text="Message In a Bottle";
    //  :gosub "give_award";
    //  :press_any_key;
    //}
  }

  :if (is_present "seashell") {
    :match "listen seashell" {
      :print "You hear ocean waves.";
    }
  }

  // help

  :match "help directions; help dir" {
    :tutorial "<north<12>> and <south<12>> are opposites, as are <east<12>> and <west<12>>.  return to <water's edge<12>> using <south<6>>.";
    :tutorial "<__<0>>N\rW + E\n<__<0>>S";
  }

  :match "stat _" {
    :if (thirst > 50) {
      :print "- you are thirsty";
    }
    :if (hunger > 50) {
      :print "- you are hungry";
    }
  }

  // AUTO-LOOK
  
  // in the jungle
  :if (index_of { outer -> (d()) inner -> ("jungle") } != -1) {
    :match "look jungle" {
      :print "A dense jungle, of the more tropical variety.";   
    }
    :match "x trees" {
      :print "Huge. Tropical.";
    }
  }

  // zones

   :if (is_at("beach_zone")) {
      :match "drink water; get water" {
        :print "What water?";
        :print "You know better thank to drink salt water.";
      }
      :match "dig sand" {
        :print "You dig for some time, but discover nothing but more sand.";
      }
      :match "look beach" {
        :print "Such beautiful white sand.";
      }
      :match "look sand" {
         :print "Your average beautiful white tropical island sand, and plenty of it.";
      }
   }

  :match "achievements -; achieve -; awards -" { :gosub "achievements"; }
  :match "wearing -" { :gosub "wearing"; }
  :match "clear -" { :clear_screen; }
  :match "goals - " { :gosub "goals"; }
   
  // humor
  :match "lol -" {
    :print "You laugh at loud, then wonder if you are starting to lose your mind.";
  }
  :match "touch yourself; touch myself" {
    :print "Perhaps later?";
    :done;
  }
  :match "pinch arm; pinch myself" {
    :print "Nope, doesn't seem like you're dreaming.";
    :done;
  }

  :match "the end" {
    :print "A bit premature?";
  }

  // CATCH ALL

  :match "push *; pull *; drag *; move *; roll *" {
    :disambiguate_s1 "present";
    :if (is_present(s1())) {
      :print "Perhaps you could, but why would you want to?";
    } :else {
      :print "I'm not sure what you're referring to.";
    }
  }

  :match "touch _" {
    :disambiguate_s1 "present";
    //:print {( s1() )}
    :if (is_present(s1())) {
      :print "You feel nothing unexpected.";
    } :else {
      :print "I'm not sure what you're referring to.";
    }
  }

  :match "eat _" { :print "Are you sure that's edible?"; }

  :match "about _;credits _" {
    :gosub "credits";
    :done;
  }

   // mend, fix, repair
   


   // fun utils

  :match "stats -" { :gosub "stats"; }
  :match "whoami -" { 
    :print "You're asking me? ... ..."; 
    :set_string var="award_name" text="Know Thyself";
    :gosub "give_award";
  }

  // TUTORIAL

  :if (tutorial_on && is_at("beach")) {
    :if (!tut_look_sand) {
      :match "south _" {
        :tutorial "I'd suggest you finish the tutorial before exploring further. It'll take only a few minutes.";
        :tutorial "Otherwise, type <tutorial off<6>> and I'll get our of your way.";
        :press_any_key;
        :redescribe;
        :done;
      }
    }
    :if (tutorial_progress<4) {
      :match "north _; east _; west _" {
        :tutorial "I'd suggest you finish the tutorial before exploring further. It'll take only a few minutes.";
        :tutorial "Otherwise, type <tutorial off<6>> and I'll get our of your way.";
        :press_any_key;
        :redescribe;
        :done;
      }
    }
  }

} /* end of global on_command */

// on_describe {
// :print "sand in mouth";
// }

// on_pre_describe {
// }

######################################
#  On Tick                       #
######################################

on_tick {
  :gosub "auto_music";

  // DEBUG
  :if (is_debug) {
    //:print {( "linger" + linger() )};
  }

  // more prominence to wearing
  :match "x _" {
    :if (is_worn(s1()) && !is_at("washedashore")) {
      :print "(you are wearing)";
    }
  }

  // booleans
  :if (is_present("wolf")) { :set_true "has_seen_wolf"; }
  :if (is_at("quiet_grove")) { :set_true "has_visited_grove"; }

  // somethings wrong in the grove
  :if (is_at("south_of_grove") && is_carried("acorn")) {
    :destroy "wolf"; // wolf is nowhere
    :if (cutsceen_grove_destroy_seen) {
      :print "<Smoke rises from the north.<13>>";
    } :else {
      :print "<You hear yelling and a loud commotion to the north.<13>>";
    }
  }

  :if (is_just_entered() && is_at("quiet_grove") && is_carried("acorn")) {
    :gosub "cutsceen_grove_destroy";
  }

  // ****************
  //  chase the wolf

  :if (is_present("wolf") && is_at("cliffs_e_clearing") && linger() >= 3) {
    :print "<The wolf looks at you, then darts off to the north<13>>";
    :destroy "wolf";
    :create "wolf" target="cliffs_e";
  }

  :if (is_present("wolf") && is_at("cliffs_e") ) {
    :match "look wolf" {
      :print "<The wolf looks back at you, then lopes off to the west<13>>";
      :destroy "wolf";
      :create "wolf" target="jungle_ee";
    }
  }

  :if (is_present("wolf") && is_at("jungle_ee")) {
    :if (linger() >= 3) {
      :print "<The wolf gazes off into the jungle then back, as if asking you to FOLLOW.<13>>";
    } :else {
      :print "<The wolf gazes off into the jungle then back, as if asking you to follow.<13>>";
    }
  }

  :set_string var = "lost_jungle_desc"  text = "Wind whistles thru the branches." ;

  // TODO: fix jungle text?????
  :if (is_just_entered() ) {
    :cycle key = "lost" predictable_order = "false" skip_interval = "0"  {
        :set_string var = "lost_jungle_desc"  text = "The jungle here is a tangle of confusing branches and paths." ;
        :set_string var = "lost_jungle_desc"  text = "" ;
        :set_string var = "lost_jungle_desc"  text = "" ;
        :set_string var = "lost_jungle_desc"  text = "";
        :set_string var = "lost_jungle_desc"  text = "";
    }
  }

  // NPC behavior (handled in on tick)

  :if (is_at("quiet_grove")) {
    :match "look flowers" {
      :mask {
        :print "<The wolf's gaze follows you.<13>>";
      }
    }
  }

   // TUTORIAL
  :if (tutorial_on) {

    // tiny help here and there
    :if (is_present("coconut_trees")) {
      :match "look trees" {
        :tutorial "Perhaps you could <shake<6>> the trees? IE: <shake trees<6>>";
      }
    }

    // tutorial, step 0 

    :if (is_at("washedashore")) {
        :match "north _" {
          :if (tutorial_progress == 0) {
              :increment "tutorial_progress";
          }
          :tutorial "Yikes - that normally works. You're in worse shape than I thought.\nTry entering '<crawl north<6>>' instead.";
        }
    }


    // we use thirst to know to trigger the "first arrival"
    //:if (is_at "washedashore" && thirst ==0 ) {
    //   :set_integer var = "thirst"  value = "50" ;
    //   :tutorial "You really should get out of that cold water.\nType <north<6>> or <n<6>> to move north.";
    //}

    //:if (is_at "beach" && is_just_entered()) {

        // :tutorial "Glad you're still with us.\nType <help directions<6>> to learn about directions.";
    //}

    // they figured it out
    :if (is_at("beach") && tutorial_progress == 0) {
        :increment "tutorial_progress";
    }

    :if (tutorial_progress==0) {
        :tutorial "You really should get out of that cold water.";
        :tutorial "Type '<go north<6>>', '<north<6>>', or even just '<n<6>>' to move north.";
    }


    :if (is_at("beach") && tutorial_progress==1) {
        :match "look debris" {
          :set_true "tut_look_debris";
        }
        :match "look gull" { :set_true "tut_look_gull"; }
        :match "eat gull" { :set_true "tut_eat_gull"; }
        :match "catch gull" { 
          :set_true "tut_catch_gull"; 
          :tutorial "Exactly, I think you have the idea!";
        }
        :match "look -" {
        :set_true "tut_look_around"; 
          :increment "tutorial_progress";
        }

        :if (!tut_look_debris) {
          :tutorial "Thank goodness you're still with us!";
          :tutorial "First, let's have a look around. Try <look debris<6>>.";        
        }
        :else_if (!tut_look_gull) {
          :tutorial "Try <look seagull<6>>.";
        } 
        :else_if  (!tut_eat_gull) {
          :tutorial "Sometimes actions won't be obvious, or might only be hinted at: such as 'delicious' seagull.";
          :tutorial "Perhaps we could try to <eat gull<6>>.";
        }
        :else_if (!tut_catch_gull) {
          :tutorial "And perhaps that would suggest <catch bird<6>>...";
        }
        :else_if (!tut_look_around) {
          :tutorial "Type just <look<6>> by itself to redescribe your current location.";
        }
        // :tutorial "Not everything you can look at will be listed - remember those blue walls?\nType <look walls<6>>.";
    }

    // beach part 2 (look sand, go south)
    :if (tutorial_progress==2) {
        :match "south _" { 
        :if (is_at("waters_edge")) {
          :increment "tutorial_progress"; 
        }
        };
    }

    :if (is_at("beach") && tutorial_progress==2) {
        :match "look sand" { :set_true "tut_look_sand"; };
      
        :if (!tut_look_sand) {
          :tutorial "You can often look at things not in the 'seen' list as well.\nPay attention when reading room descriptions.";
          :tutorial "For example, try <look sand<6>>.";
        }
        :else {
          :tutorial "North is the opposite of south, as east is the opposite of west.\nType <south<6>> to return to where you washed ashore.";
        }
    }

    //:print {("tutorial progress " + tutorial_progress)};

    // tutorial 3, waters edge, using items
    :if (is_at "waters_edge" && tutorial_progress==3) {
        :match "look _" {
          :tutorial "Using <look<6>> by itself repeats the location description.\nTry <look knife<6>> or <look seashell<6>>";
        }
        :match "look knife" {
          :if (is_beside "knife") {
            :tutorial "A knife seems useful.  \nType <get knife<6>> to pick it up.";
          }
        }
        :match "look seashell; listen seashell" {
        :if (!is_carried("seashell")) {
          :tutorial "Go ahead and pick it up with <take seashell<6>>.";
        }
        }
        :match "get knife" {
          :if (!is_carried("seashell")) {
            :tutorial "Great! Now what about that seashell?";
          } :else {
            :tutorial "Awesome, now try <i<6>> or <inventory<6>> to see what you're carrying.";
          }
        }
        :match "get shell" {
          :if (!is_carried("knife")) {
            :tutorial "A knife seems even more useful (than a seashell).  \nType <get knife<6>> to pick it up.";
          } :else {
            :tutorial "Awesome, now try <i<6>> or <inventory<6>> to see what you're carrying.";
          }
        }
        :match "drop seashell" {
          :tutorial "I believe you have the hang of it!";
          :tutorial "That shipwreck to the south sure looks intriguing. (<look wreck<6>>)";
        }
        :match "look shipwreck; look south" {
          :tutorial "I'll be much quieter from this point, good luck!";
          :tutorial "Type <HELP<6>> at any time to see help with the basics.";
          :increment "tutorial_progress"; // to 4
        }
        :match "inventory _" {
          :tutorial "Notice that some items can also be worn, such as pants.";
          :if (is_carried("seashell")) {
              :tutorial "But do you really need a shell? Set it down again with <drop seashell<6>>.";
          }
        }
    }
    :if (is_at "waters_edge" && is_just_entered() && tutorial_progress==3) {
        :tutorial "Since we just went south, going from here north would return us to the beach. First lets have a <look<6>> around.\n";
    }

    
  }

   // TUTORIAL
   //
   // [x] movement
   // [x] get/drop
   // [x] looking
   // [x] two word parser


  :if (!is_at("waters_edge") && !is_at("beach") && !is_at("washedashore")) {
    :if (!has_set_initial_thirst) {
      :set_true "has_set_initial_thirst";
      :set_integer var="thirst" value="75";
    }
  }
 

   // dream & intro

   :if (dream_intro) {
      :increment "dream_counter" ;
      :decrement "until_wave" ;
      :if (is_at "dream_ship" && dream_counter > 2) {
        // :print_graphic "storm";
        :set_string var="tmp_string" text="";
        :cycle key = "wave" predictable_order = "false" skip_interval = "0" max_loops="1"  {
          :set_string var="tmp_string" text="You feel ill." ;
          :set_string var="tmp_string" text="You imagine you hear the terrifying roar of a leviathan." ;
          :set_string var="tmp_string" text="The frigid wind whips through your hair." ;
          :set_string var="tmp_string" text="In the distance you hear crashing waves." ;
          :set_string var="tmp_string" text="The ship violently rocks to and fro.";
          :set_string var="tmp_string" text="If there was ever a time for prayer...";
          :set_string var="tmp_string" text="The ship lurches from side to side, almost as if possessed.";
          :set_string var="tmp_string" text="The ship groans and strains, trying to avoid being torn apart.";
          :set_string var="tmp_string" text="You are afraid.";
          :set_string var="tmp_string" text="If there were ever a time for speeches, it's now.";
          :set_string var="tmp_string" text="You fear you may never see your beloved Lucy again.";
          :set_string var="tmp_string" text="You hear a fellow crewmate cry out in the night.";
          :set_string var="tmp_string" text="You really wish you'd used the restroom earlier.";
          :set_string var="tmp_string" text="You imagine the ship being torn apart.";
          :set_string var="tmp_string" text="Several cats run madly across the deck meowing fearfully.";
          :set_string var="tmp_string" text="You see your life flashing before your eyes.";
          :set_string var="tmp_string" text="You regret the life choices that brought you here.";
        }
      }

      :if (tmp_string == "") {
        :print "^c^... {until_wave} ...";
      } :else {
        :print "^c^... {until_wave} ...\n^c^{tmp_string}";
      }

      :if (until_wave <= 0) {
         :set_integer var = "until_wave"  value = "255" ;
         :set_false "dream_intro";

         :press_any_key ;
         :clear_screen;
         :print "At the last moment you close your eyes and attempt to find your happy place - hoping to drown out the terrible noise of the boat splitting in two and the terrified screams of the crew.";
         :print "Sadly, you fail, but mercifully the darkness soon claims you...";
         // :failure ;
         :beep millis="200" pitch="0";
         :beep millis="200" pitch="-3";
         :beep millis="200" pitch="-8";
         :beep millis="500" pitch="-15";
         :press_any_key ;
         :gosub "dream_of_storm_end";
         :redescribe;
         :done;
      }
   }

  :gosub "track_input_stats";
  :gosub "update_status_effects";

  :match "wiz end" {
    :gosub "cutsceen_grove_destroy";
  }

  :match "cheat wiz_cutscene" {
    :gosub "cutsceen_grove_destroy";
    :done;
  }
  :match "cheat win" {
    :gosub "win_game"; 
    :done;
  }
  :match "cheat plant" {
    :gosub "cutsceen_plant_acorn";
    :done;
  }

  :match "success _" {
    :success;
  }

  :if (is_present("burnt_tree")) {
    :match "look tree; touch tree" {
      :gosub "cutsceen_plant_acorn";
      :done;
    }
  }

} // end of global on_tick // 


subroutines {
  goals: subroutine {
    :print "GOALS";
  }

  dream_of_storm: subroutine {
    :set_true "dream_intro";
    :set_integer var="dream_counter" value="-1";
    :set_integer var="until_wave" value="26";
    :set_theme "dream_theme";
    
    :create "d_stranger" target="dream_ship";
    :goto "dream_ship";
    :press_any_key;
  }

  dream_of_storm_end: subroutine {
    :set_false "dream_intro";
    :set_true "has_dreamed_of_storm";
    :set_integer var="dream_counter" value="-1";
    :set_integer var="until_wave" value="26";
    :set_theme "main_theme";
    :gosub "main_music_theme";  
    :goto "beach_ww_rocky";
  }

  main_music_theme: subroutine {
    :play_music "music_fantasy_overture";
  }

  cutsceen_signal_fire : subroutine {
    :if (cutsceen_signal_fire_seen) { :done; }
    :set_true "cutsceen_signal_fire_seen";

    :set_string var="award_name" text="Smoke Signal";
    :gosub "give_award";  
    :press_any_key;
  }

  cutsceen_plant_acorn : subroutine {
    :if (cutsceen_plant_acorn_seen) { :done; }
    :set_true "cutsceen_plant_acorn_seen";

    :print "<You suddenly remember the acorn.<13>>";
    :press_any_key;
    :print "Kneeling down you dig a small hole and gently plant the acorn.";
    //:pause millis = "4000" ;
    :print "Was this somehow all part of a grand master plan?";
    //:pause millis = "4000" ;
    :print "Were you an ally of the grove or an unwitting pawn of the wizard...";
    //:pause millis = "4000" ;
    :press_any_key;
    :print "...both?";
    //:pause millis = "1000" ;
    :print "...neither?";
    :print "You worry you may never know.";
    //:pause millis = "1000" ;

    :set_string var="award_name" text="Kings or Pawns";
    :gosub "give_award";

    :press_any_key;
    :create "broken_staff";
    :redescribe;
    //:return;
  }

  cutsceen_wizard_staff : subroutine {
    :if (cutsceen_wizard_staff_seen) { :done; }
    :set_true "cutsceen_wizard_staff_seen";

    :print "You notice the wizard's bloodwood staff laying nearby, broken in half.";
    :print "<A thought enters unbidden into your mind.<13>>";
    :press_any_key;
    :print "<Might the staff be reassembled?<15>>";
    :print "You imagine the good you could accomplish with such powers...";
    //:pause millis = "4000" ;
    :print "You whistle idly as you collect both halves of the staff.";
    //:pause millis = "4000" ;
    :print "You depart the burnt grove confident of rescue and oddly certain of long life.";
    :press_any_key;
    :print "...and an acorn slowly begins to grow...";
    :press_any_key;
  }

  cutsceen_grove_destroy : subroutine {
    :if (cutsceen_grove_destroy_seen) { :done; }
    :set_true "cutsceen_grove_destroy_seen";

    // give us a chance to switch the grove music to action
    :gosub "auto_music";

    :print "^c^---";
    :print "A dark robed figure stands before the ancient tree.";
    //:pause millis = "2000" ;
    :print "<The wizard laughs maniacally.<13>>";
    :press_any_key;
    :clear_screen;

    :print "❝A pet human?  How very foolish. ";  
    //:pause millis = "3000" ;
    :print "There was once a time you did not make such mistakes.";
    //:pause millis = "3000" ;
    :print "The grove, so long hidden from my sight.";
    //:pause millis = "3000" ;
    :print "Millennia I have slept, waited, and dreamt of this day.";
    //:pause millis = "3000" ;
    :print "I had only to follow your pitiful pet.❞";
    //:pause millis = "3000" ;
    :print "<The wizard raises his bloodwood staff.<13>>";
    :press_any_key;
    :clear_screen;

    :print "“What began long ago.  Hodie est complevit!”";
    :print "<The wizard recites words of power.<13>>";
    :press_any_key;
    :print "Blood red fire rains down, engulfing the massive tree. The ground shakes and you are thrown backwards into the jungle.";

    :press_any_key;
    :print "The last thing you remember is a vicious growling, as if all the beasts of the earth cried out with a singular voice...";
    :print "...and then it all fades to black...";
    :press_any_key;

    :goto "south_of_grove";
    :redescribe;
  }

  achievements : subroutine {
    :print "^c^<✜ ACHIEVEMENTS ✜<13>>";
    
    :if (collection_count("awards") == 0) {
      :append "No achievements yet.";
      :return;
    }

    :collection_iterate "awards" {
      :append {(item() + ". ")}
    }
    :print {("\n(" + collection_count("awards") + " / " + max_achievements + ")" )}
    :print "\n";
  }

  stats : subroutine {
   :print "^c^<✜ STATISTICS ✜<13>>";
   :print {( "^n^- You typed " + total_inputs + " words across " + turns() + " turns.")}
   :print {( "^n^- You used the <LOOK<6>> verb " + total_looks + " times.")}
   :print {( "^n^- You explored " + total_rooms + " different map locations.")}
   :print "\n";
  }

  endgame_credits : subroutine {
    :gosub "credits";
  }

  credits: subroutine {
    :print "^c^<✜ CREDITS ✜<13>>";
    :print "^n^<Story & Game Design:<#fc3>> Josh Goebel" ;
    :print "^n^<Testing:<#fc3>> Rhiannon Stanton, Messick Family, Dee Cooke, <Tristin Grizel Dean<#369>>[https://grizel.itch.io/]" ;
    :print "^n^<Engine:<#fc3>> Adventuron 1.0 (Beta 68j), by Chris Ainsley" ;
    :print "^n^<Fonts:<#fc3>> Antic Slab from <Google Fonts<#369>>[https://fonts.google.com/specimen/Antic+Slab]" ;
    :print "^n^<Music:<#fc3>> Shane Iver of <Silverman Sound Studios<#369>>[https://www.silvermansound.com]" ;
    :print "^n^<Songs:<#fc3>> Fantasy Overture, Helena's Lament, Janus Turning, Underglow, Zen Garden, I Domine";
    :print "^c^^n^© 2022 Josh Goebel.\nNot for commercial use. Do not redistribute." ;
  }

  the_end: subroutine {
    :print "The wizard steps forward, raises his bloodwood staff...";
    :press_any_key;
    :print "...then bows low. The rest of the crew follows his lead.";
    :print "\n\"<We each played our parts...\n...but you were the star.<#fff>>\"\n\n";
    :press_any_key;
    :print "^c^<✜ THE END ✜<13>>";
    :win_game ;
  }

  win_game : subroutine {
    :clear_screen;
    :print "^c^<CONGRATS! YOU HAVE WON!<14>>\n" ;
    :gosub "achievements";
    :press_any_key;
    :gosub "stats";
    :press_any_key;
    :gosub "endgame_credits";
    
    :gosub "post_game";
  }

  post_game : subroutine {
    :goto "reception";
  }

  help: subroutine {
    :print "- type '<LOOK<6>>' or '<LOOK<6>> <thing<#da5>>' to examine clues.";
    :print "- type '<I<6>>' or '<INVENTORY<6>>' to see what you hold (and wear).";
    :print "- type '<GET<6>> <thing<#da5>>' to pick up an item.";
    :print "- type '<DROP<6>> <thing<#da5>>' to drop or place an item.";
    :print "- type '<ACHIEVE<6>>' to see your game achievements.";
    //:print "- type '<STATS<6>>' to see game stats (moves, etc).";
    :print "- type <N<6>>, <S<6>>, <E<6>>, <W<6>>, <UP<6>>, <DOWN<6>>, etc to move.";
    //:if (tutorial_on == false) {
    //  :print "- type '<TUTORIAL ON<6>>' to turn tutorial hints on.";
    //}
    :if (tutorial_on == true) {
          :print "- type '<TUTORIAL OFF<6>>' to turn the tutorial off.";
    }
    :print "- type '<SOUND<6>>' for sound settings.";
    :print "- type '<LOAD<6>>' or '<SAVE<6>>' to load or save a game.";
    :print "- type '<QUIT<6>>' to restart a game.";
  }
  
  ask_tutorial: subroutine {
    :clear_screen;
    :print "\n\n";
    :tutorial "Hello, I'm your friendly tutorial. I'll help you learn how to play if you're new to text adventure games.";
    :tutorial "You can shut me up at any time with <TUTORIAL OFF<6>>, so if you're on the fence, perhaps let me try to help?";
    :ask_bool {
      var = "tutorial_on"
      question = Enable the learning tutorial? <(recommended)<10>>
      yes_answer = yes
      no_answer = no
    }
    :if (!tutorial_on) {
      :clear_screen;
      :print "You are skipping the tutorial. A few final things:";
      :tutorial "- this game uses a simple verb/noun parser.";
      :tutorial "- commands are never more than two words: <NORTH<6>>, <EAT FOOD<6>>, etc.";
      :tutorial "- during the game you can type <HELP<6>> at any time for basic help." ;
      :press_any_key;
    }
  }

  ask_fantasy_violence: subroutine {
    :clear_screen;
    :print "\n\n";
    :tutorial "This game may include fantasy violence (both direct and implied).";
    :ask_bool {
      var = "fantasy_violence_ok"
      question = Do you still wish to continue?
      yes_answer = yes
      no_answer = no
    }
    :if (!fantasy_violence_ok) {
      :clear_screen;
      :tutorial "Understood.  I hope you find another game to play, good luck!";
      :lose_game;
    }
  }

  title_screen: subroutine {
    :print "<$${__game_name}<#fc3>>\nv$${__game_version}";
    :print "by Josh Goebel";
    :print "© 2022";
    :print "^r^(little yellow wiggly\n means press enter)";
    :press_any_key;
  }

  bootup: subroutine {
    :create "your_earring" target="inventory";
    :create "your_pants" target="inventory";
    :wear "your_earring";
    :wear "your_pants";
  }

  update_status_effects: subroutine {
    :set_string var="status" text="";
    :set_false "has_status";

    :if (thirst > 50) {
      :set_true "has_status";
      :set_string var="status"  {(
        status + "<thirsty<7>>"
      )}
    }
    :if (hunger > 50) {
      :if (has_status) {
        :set_string var="status"  {( status + " " )}
      }
      :set_true "has_status";
      :set_string var="status" {( status + "<hungry<7>>" )}
    }
  }

  track_input_stats: subroutine {
    :add var="total_inputs" value="2";
    :match "examine _" {
      :add var="total_looks" value="1";
    }
    :if (is_first_entered()) {
      :add var="total_rooms" value="1";
    }
  }

  // borrowed from Sentient Beings
  auto_music: subroutine {
    :if (is_sound_muted) {
      :return;
    }
    :else_if (is_at("dream_ship")) {
      :play_music "music_janus_turning";
    }
    :else_if (is_at("western_heights_dream")) {
      :play_music "music_underglow";
    }
    :else_if (is_at("quiet_grove")) {
      :if (!cutsceen_grove_destroy_seen) {
        :play_music "music_zen_garden";
      } :else {
        :play_music "music_i_domine";
      }
    }
    :else_if (is_at("burnt_grove")) {
      :play_music "music_helenas_lament";
    }
    :else {
      :play_music "music_fantasy_overture";
    }
  }
  update_volume: subroutine {
    :if (is_sound_muted) {
      :set_music_vol volume="0";
    }
    :else_if (sound_volume == "lowest") {
      :set_music_vol volume="3";
    }
    :else_if (sound_volume == "low") {
      :set_music_vol volume="7";
    }
    :else_if (sound_volume == "normal") {
      :set_music_vol volume="16";
    }
    :else_if (sound_volume == "high") {
      :set_music_vol volume="40";
    }
    :else_if (sound_volume == "highest") {
      :set_music_vol volume="100";
    }
  }

  give_award: subroutine {
    :if (collection_contains { collection="awards" value -> (award_name) }) {
      :return;
    }

    :collection_push { collection = "awards" content -> (award_name) };
    :print "<Achievement<2>>: {award_name}";
    :success;
  }

  sentence_rewriting: subroutine {
    //:if (noun1_is("wolf") && is_present("crumbled_statue")) {
    //  :set_sentence "$1 statue" ;
    //}
  }

  wearing: subroutine {
    :append "wearing:\s" ;
    :look_inside of="inventory" extract_the="description" store_results_in="tmp_list" show_unworn="false" add_worn_suffix_if_applicable="false" ;
    :print_list_verbose  "tmp_list" lead_in="" ;

    :look_inside {
      of               = inventory
      extract_the      = id
      store_results_in = tmp_list
    }
    :print "wearing: ";
    :collection_iterate "tmp_list" {
      :if (is_worn(item())) {
        :append {( "- " + d(item()) )}
      }
    }
  }
}

assets {
  sounds {
    music_breathe: sound_sample "http://joshgoebel.com/adventure/breathe.mp3";
    music_faded_dream: sound_sample "http://joshgoebel.com/adventure/faded-dream.mp3";
    music_fantasy_overture: sound_sample "http://joshgoebel.com/adventure/fantasy-overture.mp3";
    music_helenas_lament: sound_sample "http://joshgoebel.com/adventure/helenas-lament.mp3";
    music_i_domine: sound_sample "http://joshgoebel.com/adventure/i-domine.mp3";
    music_janus_turning: sound_sample "http://joshgoebel.com/adventure/janus-turning.mp3";
    music_sailing_away: sound_sample "http://joshgoebel.com/adventure/sailing-away.mp3";
    music_underglow: sound_sample "http://joshgoebel.com/adventure/underglow.mp3";
    music_zen_garden: sound_sample "http://joshgoebel.com/adventure/zen-garden.mp3";
  }

  graphics {
    loading_graphic : png "http://joshgoebel.com/adventure/island.png" scaling_mode="regular" ;
  }

  fonts {
    userfont_antic : ttf {
      // Extracted from https://fonts.googleapis.com/css2?family=Montserrat&display=swap
      filepath     = "https://fonts.gstatic.com/s/anticslab/v15/bWt97fPFfRzkCa9Jlp6IacVcXExq9Qs.woff2"
      snap_vert    = "false"
      // This is the balance between average vertical pixels and average horz pixels for
      // use in mapping the font's sizing to the 'columns' property in the theme settings.
      horz_pixels  = "8"
      vert_pixels  = "15"
    }
  }
}

game_settings {
  inventory_items_limit_var = inventory_limit
  auto_pluralize_nouns = true

  precache_strategy = precache_all
  //auto_ask_sound_permissions = false
  //scan_entity_ids_for_vocab_items = false
}