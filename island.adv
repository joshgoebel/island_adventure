##################################################
## Lost Island, written by Josh Goebel
##################################################

//on_debug {
// : goto "dream_ship";

// :goto "cliffs_e";
//:goto "shipwreck";

//:pocket "red_marble";
// :pocket "blue_stone";

//:goto "western_heights";
//:create "chopped_driftwood";
//:create "chopped_oak";
//:create "chopped_darkwood";
//:create "charts";
//:pocket "matchbook";

//}


on_startup {

   // : beep millis = "100"  pitch = "0" ;
   // : beep millis = "100"  pitch = "2" ;
   // : beep millis = "100"  pitch = "4" ;
   // : beep millis = "100"  pitch = "6" ;

   // :set_true "dream_intro";
   //:tutorial "Hello, I'm the tutorial. I'll help you learn how to play if you're new to this type of game.";
   //:tutorial "Hint: The wiggling dot means press a key.";
   //: press_any_key ;

   :set_false "tutorial_on";

   :gosub "title_screen";
   :gosub "ask_tutorial";
   :gosub "bootup";

   //:goto "western_heights";
   //:pocket "spyglass";
   //:goto "shipwreck";

   //:goto "cliffs_e_clearing";
   //:goto "quiet_grove";
   //:pocket "candle";
   //:pocket "matchbook";

   //:pocket "red_marble";
   //:pocket "blue_marble";

   //:create "wolf";
   :goto "beach";


   // : beep millis = "100"  pitch = "6" ;
   // : beep millis = "100"  pitch = "4" ;
   // : beep millis = "100"  pitch = "2" ;
   // : beep millis = "100"  pitch = "0" ;
}



// - [ ]

start_at = washedashore
template = talp

######################################
#  Strings                           #
######################################

game_settings {
   inventory_items_limit_var = inventory_limit
}

strings {
   tut_jones_desc : string "squinting";
   status : string "<THIRSTY<2>>" ;
   blank : string "";
   prompt : string "[]: ";
   flower_color: string "yellow";
   lost_jungle_desc: string "";
   treasure_score: string "{until_wave}";
   header_text : dynamic_string { ( "<" + h() + "<5>>")} ;
   //status_prompt : dynamic_string { (has_status ? status : blank) }
   status_prompt : dynamic_string {( "[]:" )}

   // changes after one sees the statue and gets the idea these might be eyes
   reminds_of_eye : dynamic_string {( " with dark veins running thru it" )}
   if_only_had_spyglass : dynamic_string {( !is_carried("spyglass") ? " If only you had a spyglass." : ""  )}
   jungle_room_description : dynamic_string {( "You're deep in the jungle.  Huge tropical trees surround you on all sides. It's easy to get lost here." )}
}

######################################
#  Booleans                          #
######################################

booleans {
  is_debug: boolean "true";

  has_seen_cliff_steps: boolean "false";
  has_looked : boolean "false";
  has_status : boolean "false";
  dream_intro : boolean "false";
  tutorial_on : boolean "true";
  game_started: boolean "false";
  is_wolf_awake: boolean "false";
  has_seen_wolf: boolean "false";
  always: boolean "true";
  knows_to_swim: boolean "false";
  has_visited_grove: boolean "false";

  tut_look_debris: boolean "false";
  tut_look_gull: boolean "false";
  tut_eat_gull: boolean "false";
  tut_catch_gull: boolean "false";
  tut_look_around: boolean "false";
  tut_look_sand: boolean "false";

  // award
  award_bookworm: boolean "false";
  award_god_fearing: boolean "false";
  award_message_in_a_bottle: boolean "false";
  award_seagull: boolean "false";
  award_acorn: boolean "false";
  award_signal_fire: boolean "false";

  // cutscenes
  cutsceen_grove_destroy_seen: boolean "false";
  cutsceen_plant_acorn_seen: boolean "false";
  cutsceen_signal_fire_seen: boolean "false";

  lit_candle: boolean "false";
}

integers {
   inventory_limit : integer "15" ;
   max_achievements :integer "20";

   until_wave: integer "21";
   dream_counter : integer "0";
   thirst: integer "0";
   hunger: integer "0";
   lost_jungle_counter: integer "0";
   oar_hit_chest_count: integer "0";
   tutorial_progress: integer "0";

   side_quests_complete: integer "0";
   temp_int: integer "0";
   kill_chance: integer "0";
   total_inputs: integer "0";
}

collections {
   tmp_list : list;
}


themes {

   my_theme : theme {

      lister_exits {
         exit_list_capitalization = lower
         experimental_enable_direction_arrows = false
         is_list_enter = true
      }
      lister_objects {
         experimental_auto_group_singular_objects = true
      }

      lister_inventory {
         experimental_auto_group_singular_objects = true
      }

       system_messages {
          tutorial_message_prefix = ""
         // on_get = "You got it!"

         object_list_end_text = ""
         exit_list_end_text = ""
         inventory_list_header        = "CARRYING: "
         inventory_list_empty         = "<NOTHING<10>>"
         // exit_list_end_text = " {status}"
         //prompt = ">>xx "
         prompt_expression = status_prompt
         prior_prompt = "{ has_status ? `({status})` : blank }"
         //object_list_header = "<…<#888>> "
         object_list_header = "<you see:<#777>> "
         object_list_separator = "<,<#666>> "
         //exit_list_header_concise= "<+<#666>>
         exit_list_header_concise= "<obvious exits: <#777>>"
         exit_list_sep_verbose = ", "
         
       }
       colors {
         
          //yousee_item_pen = 5
          status_bar_paper = #36c
         //  exit_list_item_pen = #999
          pen =7
          exit_list_item_pen = #393
          exit_list_punctuation_pen = #393
          tutorial_pen = 4
          border = 0
          header_pen = 5
       }


       //status_bar {
       
         // : header_text;
         // : treasure_score;

         // : dynamic_text "score_topright" ;
      //}
      //extends = two
      screen {
      
         // padding_horz                 = 24
         status_bar_padding_bottom = 1
         status_bar_padding_top = 1
         
         // padding_horz = 0

      }
      theme_settings {
         //capitalization   = upper
         textbox_capitalization = original
         font = userfont_antic
         columns = 60
         // space_normalization = raw
         redescribe = auto_beta
         //clear_screen_enable = false
         enable_prior_prompt = true
         success_jingle  = on
         // wingame_jingle  = on
         failure_jingle  = on
//          // layout  = SB G D X O SEP "adv_line_red" LOCK
         //layout = SB G LOCK D O X
         layout =  P* "header_text"- G D- X O 
         // columns = 40
         keyboard_click  = off
         default_delay = 000
         parser_delay = 300
      }
   }
}

assets {
   fonts {

      userfont_antic : ttf {
         // Extracted from https://fonts.googleapis.com/css2?family=Montserrat&display=swap
         filepath     = "https://fonts.gstatic.com/s/anticslab/v15/bWt97fPFfRzkCa9Jlp6IacVcXExq9Qs.woff2"
         snap_vert    = "false"
         // This is the balance between average vertical pixels and average horz pixels for
         // use in mapping the font's sizing to the 'columns' property in the theme settings.
         horz_pixels  = "8"
         vert_pixels  = "15"
      }
   }
}


locations {
   placeholder : location "dummy location for fake connections";

   // beach
   beach : location "A beach of beautiful white sand extends along the shoreline.  Further back looks like jungle." header="Southern Shore";
   beach_w : location "A beach of beautiful white sand." header="Southern Shore";
   beach_ww : location "A beach of beautiful white sand. There is a rocky outcropping to the north." header="Southern Shore";
   beach_e : location "A beach of beautiful white sand." header="Southern Shore";
   beach_ee : location "A beach of beautiful white sand." header="Southern Shore";
   beach_ww_rocky :location "A small crevice disappears downwards into the rock." header="Rocky Outcropping";
   beach_ww_cave :location "You are standing in a small cave, it's hard to see." header ="Small Cave";
   
   waters_edge :  location "You washed ashore here. Further south out to sea a half sunken shipwreck rises from the waves." header="Water's Edge" {
      on_command {
         :match "look sky; look up" {
           :print "Nice day. Partly cloudy.";
         };
         :match "look waves; look sea" { :print "The waves look angry."; };
         :match "look ship; look shipwreck; look wreck; look south" {
            :print "A black skull and crossbones flutters in the wind. You wonder if you could swim that far.";
         };
         :match "south _" { 
            //:if (!is_worn("medallion")) {
               :print "How? You can't exactly walk to the ship."; 
            //}
         };
         :match "swim _" {
            :if (is_worn("medallion")) {
               :set_true "knows_to_swim";
               :goto "shipwreck";
            }
            :else {
               :print "It's pretty far out.  You aren't feeling strong or lucky enough at the moment." ;
            };
         }
      }
   };

   washedashore   : location "You wake up with a mouth full of sand; your body half in, half out of the cold sea.  You have never been happier to be alive." header="The Cold Sand" {

      on_command {
         :match "n _; stand _" {
            :print "You can barely stand. Perhaps crawl?";
            :failure;
         };
         :match "look *; examine *" {
           :print "You can't see anything from how you're laying but sand.";
         }
         :match "s _" { :print "How? Swim?  Perhaps another day.";};
         :match "spit _" { :print "You spit out some sand. You're very thirsty."; };
         :match "swim _" { :print "You aren't feeling that lucky." ; };
         :match "x sea" { :print "You're flat on your face, but it's cold.";};
         :match "crawl _" {
            :print "You claw your way slowly out of the water and onto dry land...\n ...then collapse exhausted.";
            :success;
            :if (tutorial_on) {
               :tutorial "Exactly! Most commands are verb/noun pairings, such as <eat food<6>> or <attack bear<6>>.";
               :tutorial "This game uses a two word parser, so commands are never more than 2 words.";
            }
            :press_any_key ;
            :clear_screen;

            :print "Some time later...";
            :press_any_key ;

            :set_integer var="thirst" value="75";
            :goto "beach";
         }
      }
   };

   // village
   village_square: location "The village surrounds you on all sides.  It's far too quiet here, like a ghost town." header="Village, Square";
   village_n: location "To the north is a large hut that seems important." header="Village";
   village_s: location "" header="Village";
   village_e: location "" header="Village";
   village_w: location "" header="Village";
   village_hut: location "Larger than the rest, this hut seems quite homey. Dust covers everything." header="Village, Elder's Hut";

   // jungle
   jungle_edge : location "A small footpath leads north into the jungle.  To the south is the beach." header="Jungle's Edge";
   jungle_entrance: location "{jungle_room_description}" header="Jungle";
   jungle_w: location "{jungle_room_description}" header ="Jungle (w)";
   jungle_ww: location "{jungle_room_description}" header ="Jungle (ww)" {
      on_command {
         :if (cutsceen_grove_destroy_seen) {
            :match "north _" {
               :goto "burnt_grove";
            }
         }
      }
   }
   jungle_e: location "{jungle_room_description}" header ="Jungle";
   jungle_ee: location "{jungle_room_description}" header ="Jungle";
   jungle_ne: location "{jungle_room_description}" header ="Jungle";
   jungle_n: location "{jungle_room_description}" header ="Jungle";
   jungle_nw: location "{jungle_room_description}" header ="Jungle";
   jungle_exit: location "{jungle_room_description}" header ="Jungle";
   village: location "There is a small village here." header="Lowlands";
   sloping_hills: location "" header="Sloping Hills";
   western_heights_dream_e: location; // dummy exit to the east
   western_heights_dream: location "A full moon hangs high above.  The wind whips at you, threatening to cast you off the cliff and into the sea." header="Western Heights" {
      on_command {
         :match "listen spell; listen incantation" {
            :print "You can't make out the words.";
         }
         :match "east _" {
            :print "You can't seem to physically move from this place.";
            :print "Yet somehow you are certain you could leave at anytime, merely by closing your eyes.";
         }
         :match "close eyes; shut eyes; blink eyes" {
            :print "You close your eyes... slowly the cold wind and rain receed until there is nothing but silence...";
            :press_any_key;
            :goto "western_heights";
         }
         :match "save wolf; help wolf; free wolf; unbind wolf" {
            :print "The urge to intervene is strong...";
            :print "Yet some part of you knows these events cannot be changed.";
         }
         :match "attack wizard; fight wizard; hit wizard; stop wizard; throw knife" {
            :print "The urge to intervene is strong...";
            :print "Yet some part of you knows these events cannot be changed.";
         }
      }
   }
   western_heights:  location "This seems to be the highest point of the entire island, allowing you to see for miles.{if_only_had_spyglass}" header="Western Heights" {
      on_tick {
         :match "look altar" {
            :print "<You have a sudden, strong desire to touch it.<#9f9>>";
         }
         :match "look crack" {
            :if (has_not_created("red_marble")) {
               :print "Wait a minute...";
               :press_any_key;
               :print "There is something hiding at the very bottom the crack.";
               :press_any_key;
               :create "red_marble";
               :print "<you notice:<#777>> red marble";
            }
         }
      }
     on_command {
         :match "touch altar" {
            :print "You feel a strange tingling...";
            :press_any_key;
            :print "...then a sudden headache...";
            :press_any_key;
            :print "...and suddenly you are here, but not here.";
            :goto "western_heights_dream";
         }
         :match "look down" {
            :print "It looks to be a sheer cliff dropping hundreds of feet to large rocks and angry ocean below.";
         }
         :match "spy down" {
            :print "Huge boulders and angry ocean so close you can almost taste it.";
         }
         :match "look south; spy south" {
            :print "A white, sandy beach lays to the south.  Further out to sea a half sunken ship sits in the waves.";
         }
         :match "look north" {
            :print "The northern part of the island appears to be dense jungle. You can barely make out movement.";
         }
         :match "spy north" {
            :print "Dense jungle.  You see a large ape swinging among the trees.";
         }
         :match "look west; spy west" {
            :print "Ocean as far as the eye can see.";
         }
         :match "look east; spy east" {
            :print "The elevation slowly slopes back down slowly to gentle, rolling hills.";
         }
     }
   }
   cliffs_e: location "The jungle ends abruptly with a 200ft plunge to rocky shores below. There is no obvious way down." header="Eastern Cliffs";
   cliffside_east: location "A three foot wide ledge, perhaps long enough that you could lay down, perhaps not. Vines cover much of the cliff face." header="Eastern Cliffs, Ledge" {
   on_command {
         :match "look vine; look vines" {
            :print "As thick as your arm, they sure look sturdy.";
         }
         :match "swing vines; swing wine" {
            :print "Are you Tarzan now? Perhaps you might climb them though.";
         }
         :match "go vines; climb vines; go vine; climb vines" {
            :goto "cliffs_e_vine_top";
         }
      }
   }
   cliffs_e_vine_top: location "You cling to the vine, it's a long way down. The safety of the ledge is beside you to the west." header="Eastern Cliffside";
   cliffs_e_vine_m: location "You cling to the vine, it's a long way down." header="Eastern Cliffside";
   cliffs_e_vine_b: location "You cling to the vine, it's still a long way down. A dark crevace seems to lead directly into the cliff." header="Eastern Cliffside";

   cliffs_e_cave_entrance: location "The passage narrows then heads downwards into the rock. Behind you are the vines." header="Eastern Cave";
   cliffs_e_cave_rear: location "" header="Eastern Cave";
   
   cliffs_e_clearing: location "You stand in a large clearing, bordered by dense jungle to the west. A huge boulder clings resolutely to the edge of the cliff." header="Eastern Cliffs,  Clearing" {
      on_command {
         :match "push boulder" {
            :print "It's massive.  It doesn't budge.";
            :if (!has_seen_cliff_steps) {
               :print "It doesn't appear entirely natural.";
            }
         }
         :match "look boulder" {
            :print "It's massive.  Looking closer you notice that rough and uneven steps carved into the boulder lead downwards.";
            :set_true "has_seen_cliff_steps";
         }
      }
   };

   lost_jungle_e: location "";
   lost_jungle_w: location "";
   lost_jungle_s: location "";
   lost_jungle_n: location "";
   lost_jungle: location "{lost_jungle_desc} You are lost." header = "Deep in the Jungle";
   quiet_grove: location "You stand in a quiet grove filled with flowers. A single massive tree stands at the center. " header ="Quiet Grove";
   burnt_grove: location "You stand in a burnt grove filled with only ashes and smoke." header ="Burnt Grove";


   dream_ship: location "You stand resolute at the helm as a wave unlike any you've ever seen rushes towards you. Your old grand-daddy used to tell tales of waves like this - <ship killers<15>> he called them." header="An Ending" {
      on_command {
         : match "pray _" {
            :print "\"Dear lord...\" You whisper your fearful request to a higher power and hope someone is listening. ";
            :set_true "award_god_fearing";
            :success;
            :print "<Achievement<2>>: God-fearing.";
         };
         : match "n _; s _; u _" {
            : print "You dare not leave your post.";
         };
         : match "d _" {
            : print "Retreating below deck sounds great, but you dare not leave your post.";
         };
         : match "u _" {
            : print "But why in the heck would you want to be up in the air in a storm like this?";
         };
         :match "mutiny _;kill captain" {
            :print "You reach for your knife... but have second thoughts.  Is mutiny truly the answer here?";
         };
         :match "walk plank; jump overboard; jump water; abandon ship; swim _" {
            :print "Surely things aren't that bad yet?";
         };
         :match "look wave" {
            :print "It must be at least as tall as 4 of your ships stacked mast to mast. A huge wall of angry water.";
         };
         :match "give speech" {
            :print "\"It's been a true honor, my friends\".\nYou were never one for long speeches.";
         };
         :match "talk firstmate; speak firstmate; look firstmate" {
            :print "\"Ain't never me seen a storm like this, oh the stories we'll tell!\" says the first mate with a silly grin.";
         };
         :match "talk captain; speak captain; look captain" {
            :print "\"Don't worry kid, we'll be fine,\" he boasts.";
            :press_any_key ;
            :print "Yet you see the fear in his eyes.";
         };
         :match "turn wheel;spin wheel;steer ship" {
            :print "You spin the wheel trying to alter course, but deep inside you know it won't matter.";
         };
      }
   };
   dream_o: location ""; // fakr room for dream ship connections

   // shipwreck rooms
   shipwreck :location "The ship is half sunken, but the skull and crossbones still flies high. To the north is the beach." header="Shipwreck";
   ship_crowsnest :location "The skull and crossbones still flies proudly in the wind." header="Crows Nest";
   ship_captains :location "Half the room is submerged beneath dark water." header="Captains Quarters" {
      on_command {
         :match "look water" {
            :print "You wonder what could be hiding beneath the surface.";
         }
         :match "swim water; check water; feel water" {
            :if (has_not_created("chest_key")) {
               :print "You feel around beneath the water and grasp a small object.";
               :print "<you've found:<#777>> key";
               :create "chest_key";
            } :else {
               :print "You feel around beneath the water, but find nothing.";
            }
         }
      }
   }

   // flashbacks
   remember_ship :location "The dock is crowded with people."  header="The Christening";

   tut_room: location "A small, tidy office. You noticed an inscription on the door as you came in." header = "The Tutorial";
   tut_bathroom: location "A private bathroom. The usual amenities." header = "The Tutorial";
   tut_lobby: location "A small lobby. The walls are blue." header = "The Tutorial";
}


objects {
   

   // village
   well: scenery "well" at="village_square" msg="It looks like hasn't been used in some time. Seems deep.";
   vendor_booths: scenery "vendor booths" at="village_square" msg="You see the remains of fruit that rotted long ago and faded fabrics.";

   bed: scenery "a bed" msg="a small bed" at="village_hut";
   kettle: scenery "a kettle" msg="a large kettle hangs over the fireplace" at="village_hut";
   fireplace: scenery "a fireplace" msg="looks like it hasn't been used in many years" at="village_hut";
   tome: object "tome" msg="a large book, very old" at="village_hut";

   // western_heights_dream
   wounded_wolf: scenery "<wolf<#c6c>>" at="western_heights_dream" msg="The large creature is bound upon the altar and appears injured. It looks towards you, or is that merely your imagination?";
   evil1_wizard: scenery "<wizard<#c6c>>" at="western_heights_dream" msg="He wears a black cape and holds a bloodwood staff. He is slowing speaking the words of some sort of incantation or spell.";
   bloodwood_staff: scenery "bloodwood staff" at="western_heights_dream" msg="The staff is at least 7 feet tall and a redish black color." conspicuous="false";
   wizard_cape: scenery "cape" at="western_heights_dream" msg="The wizard's black cape is blowing about madly in the wind." conspicuous="false";
   moonstone_altar: scenery "moonstone altar" at="western_heights_dream" msg="A massive moonstone altar.  It's glowing a bright blueish yellow.";
   blazing_bonfire: scenery "huge bonfire" at="western_heights_dream" msg="A massive bonfire lights the night, yet provides no warmth.";

   // western heights
   charred_ashes: scenery "charred ashes" at="western_heights" msg="Appears to be the remains of a large bonfire from many moons ago. This would be the perfect spot to build a signal fire.";
   stone_altar: scenery "stone altar" at="western_heights" msg="A massive moonstone altar. A wide crack intersects it from top to bottom.";
   altar_crack: scenery "crack" at="western_heights" msg="It almost looks as if it was violently torn in half. What forces could do such a thing?" conspicuous="false";
   altar_moonstone: scenery "moonstone" at="western_heights" msg="Slightly bluer than limestone; glows when exposed to moonlight; known to be almost indestructable. The superstitious say it posses magical properties." conspicuous="false";

   // forest
   wolf: object "a <dire wolf<#c6c>>" at="quiet_grove" msg="A dire wolf with a light grey mane and deep <golden<#fc3>> eyes.";
   tall_tree: scenery "an ancient tree" at="quiet_grove" msg="It towers above you, with smooth white bark and light crimson blossoms. It could easily be thousands of years old - or older.";
   blue_flowers: scenery "flowers" at="quiet_grove" msg="You wonder among the flowers. Such <impossible hues<#r>> and shades of color, and a rich smell of chocolate and sunshine.";

   burnt_tree: scenery "dead tree" at="burnt_grove" msg="Dead. The life force you felt before is gone.";
   //dead_wolf: scenery "<dead wolf<#c6c>>" at="burnt_grove";
   //dead_wizard: scenery "<dead wizard<#c6c>>" at="burnt_grove";
   broken_staff: object "a broken staff" at="burnt_grove" msg="You wizard's staff is broken in half and powerless.";


   // mouthsand : object "sand in mouth" at = "washedashore";
   // d_rope: object "a rope" at="dream_ship";
   // dream ship
   d_captain: scenery "<captain<#c6c>>" at="dream_ship";
   d_firstmate: scenery "<firstmate<#c6c>>"  at="dream_ship";
   d_wheel: scenery "ship's wheel" at="dream_ship" msg="Hand crafted with the finest Darkwood from the Isle of blah blah... honestly you weren't paying that much attention when the Captain blathered on and on about it during the tour.";
   d_plank: scenery "plank" at="dream_ship" msg="You've seen plenty walk it.";
   d_mast: scenery "mast" at="dream_ship" msg="It extends upwards into the dark night. You know someone is manning the crow's nest, but you don't envy them.";

   red_marble: object "red marble" msg="A small, smooth red pebble{reminds_of_eye}. It feels hot to the touch, as if it was alive.";
   blue_marble: object "blue marble" msg="A small, smooth, blue pebble{reminds_of_eye}. It feels hot to the touch, as if it was alive.";

   // wearing
   your_pants: object "some pants" msg="Comfortable everyday sailor pants." wearable="true";
   your_earing: object "a gold earing" msg="A small silver teardrop earing" wearable="true";

   // beach
   pool :scenery "pool" at="beach_ww_rocky" msg="A small pool of crystal clear water. Drinkable.";
   medallion :object "a silver medallion" msg="It's attached to leather cordage and seems cold to the touch." get_message = "You suddenly feel luckier." wearable="true" at ="cliffside_east";
   knife: object "a knife" at = "waters_edge" msg="It appears quite sharp.";
   oar: object "an oar" at ="beach_w";
   broken_oar: object "a broken oar"  msg="Broken in half, useless.";
   coconut_trees: object "coconut trees" at="beach_w" msg="Coconuts are delicious. But they are up to high.";
   coconut: object "a coconut" msg="A delicious coconut.";
   seagull: scenery "seagull" at = "beach" msg="What a beautiful, delicious bird.";
   dead_seagull: scenery "dead seagull" msg="What a beautiful, delicious bird.";
   debris : scenery "random debris" at = "beach" msg="Random debris from the shipwreck. You see nothing useful at the moment.";
   msg_bottle: object "a bottle" at = "beach_w" msg="A beautiful blue frosted glass bottle that looks as if it's been tossed on the waves for years.  There is a message inside.";
   seashell : object "a seashell" at = "waters_edge" msg="Reminds you of picking up seashells as a child.";
   stone: object "a stone" msg="one of the stones from the strange pile";
   pile_stones: scenery "pile of stones" at ="beach_ee" msg="A pile of perhaps 100 smooth, rounded stones.";
   shadow_bear: scenery "huge black bear" at="beach_ww_cave";
   ships_wheel: scenery "ship's wheel" msg="The ship's wheel. You must have never even let go - your grand-daddy would be so proud." at="waters_edge";

   // chest
   chest: scenery "locked chest" at="beach_e" msg="Massive solid oak chest (locked). Perhaps you could smash it open?";
   open_chest: scenery "oak chest" msg="Massive solid oak chest. (open)";
   chest_key: object "a key" msg="A small, brass skeleton key."; // under the water
   gold_coins: object "gold coins" msg="A small handful of gold coins.";
   matchbook: object "a matchbook" msg="A small book of matches.";
   love_letters: object "love letters" msg="Poetry and love letters to the Captain's old girlfriend.";

   // wood
   driftwood : object "driftwood" at = "beach_ww";
   chopped_driftwood : object "chopped driftwood";
   chopped_oak : object "chopped oak";
   chopped_darkwood : object "chopped darkwood";
   signal_fire: scenery "signal fire" msg="A huge blaze, it should be possible to see for miles.";

   // jungle
   wolf_statue: scenery  "statue" at="cliffs_e_clearing" 
      msg="In the middle of the clearing is a statue of a HUGE wolf, every bit as tall as you.  Strangely, it appears to be missing its eyes.";
   wolf_statue2: scenery  "wolf statue" noun="statue"
      msg="In the middle of the clearing is a statue of a HUGE wolf, every bit as tall as you.  Strangely, it appears to be missing its eyes.";
   wolf_statue3: scenery  "wolf statue" noun="statue"
      msg="In the middle of the clearing is a statue of a HUGE wolf, every bit as tall as you. Its eyes are a dull gold color.";
   wolf_statue4: scenery  "crumbled statue" noun="statue"
      msg="The crumbled remains of a statue litter the middle of the clearing.";
   circle_stones: scenery  "circle of stones" msg="Two dozen large stones each the size of your head form a circle around the statue." at="cliffs_e_clearing";

   // sunken ship
   spyglass :object "a spyglass" at="ship_crowsnest" msg="A spyglass, good for looking long distances.";
   logbook :object "the captain's log" at="ship_captains" msg="This huge tome is where the Captain logged the missions.";
   candle :object "a candle" at ="ship_captains" msg="Just a candle plus a few matches.";
   charts :object "nautical charts" at="ship_captains" msg= "For now, scrap paper. Perhaps useful if you ever get off this island.";
   book :object "a book" at="ship_captains" msg ="Moby Dick";
   moby_book :object "Moby Dick (book)" msg="Moby Dick" noun="book";
   axe :object "an axe" at="shipwreck" msg="Good for chopping wood, you suppose.";
   mast :scenery "mast" at="shipwreck" msg="The Crows Nest is up there.";

   // shady grove
   acorn :object "an acorn" msg="Looks like an acorn. Smells like an acorn.";

   // flashbacks
   r_ship: scenery "ship" at="remember_ship";
   r_ship1: scenery "people" at="remember_ship";
}

vocabulary {

   // Here we assocated new words with the already supported english system vocab
   : verb / aliases = [exit, leave]
   : verb / aliases = [look, l ]
   : verb / aliases = [spy, spyglass ]
   : verb / aliases = [touch, feel]
   : verb / aliases = [talk, speak, greet]
   : noun / aliases = [bird, seagull, gull]
   : noun / aliases = [log, logbook]
   : noun / aliases = [wood, driftwood, oak, darkwood]
   : noun / aliases = [shell, seashell]
   : noun / aliases = [matchbook, matches, match]
   }

connections {
   from, direction, to = [
      tut_room, south, tut_lobby,
      tut_room, west, tut_bathroom

      washedashore, north, placeholder,
      waters_edge, north, beach,
      waters_edge, south, shipwreck,
      // dream intro
      dream_ship, north, dream_o,
      dream_ship, south, dream_o,
      dream_ship, down, dream_o,
      dream_ship, up, dream_o,
      // shipwreck
      shipwreck, up, ship_crowsnest,
      shipwreck, down, ship_captains,
      // beach
      beach_ww, north, beach_ww_rocky,
      beach_ww_rocky, down, beach_ww_cave,
      beach, north, jungle_edge,
      beach, west, beach_w,
      beach, east, beach_e,
      beach_e, east, beach_ee,
      beach_w, west, beach_ww,
      // village
      village,enter,village_s
      village_square,north, village_n
      village_square,east, village_e
      village_square,south, village_s
      village_square,west, village_w
      village_n,north, village_hut

      // jungle
      jungle_edge, north, jungle_entrance
      jungle_entrance,west, jungle_w
      jungle_w,west,jungle_ww
      jungle_entrance,north,jungle_e
      jungle_e,north,jungle_ne
      jungle_ne,east,jungle_ee
      jungle_ne,west,jungle_n
      jungle_n,west, jungle_nw
      jungle_nw,south,jungle_exit

      // lost jungle
      lost_jungle,west, lost_jungle_w
      lost_jungle,east, lost_jungle_e
      lost_jungle,south, lost_jungle_s
      lost_jungle,north, lost_jungle_n
      quiet_grove,south, jungle_ww // protected by barrier

      jungle_exit,west,village
      jungle_ee,east,cliffs_e
      village,west,sloping_hills
      sloping_hills,west,western_heights
      cliffs_e,south,cliffs_e_clearing
      cliffside_east,up, cliffs_e_clearing
      
      cliffs_e_vine_top,west,cliffside_east
      cliffs_e_vine_top,down,cliffs_e_vine_m
      cliffs_e_vine_m,down,cliffs_e_vine_b
      cliffs_e_vine_b,enter,cliffs_e_cave_entrance

      cliffs_e_cave_entrance,down,cliffs_e_cave_rear

      western_heights_dream,east,western_heights_dream_e
   ]
}

zones {
   beach_zone : zone {
      locations = [
         beach,
         beach_e,
         beach_ee,
         beach_w,
         beach_ww,
         waters_edge
      ]
   }

   jungle_zone : zone {
      locations = [
         jungle_entrance,
         jungle_w,
         jungle_ww,
         jungle_e,
         jungle_ee,
         jungle_ne,
         jungle_n,
         jungle_nw,
         jungle_exit
      ]
   }
}


barriers {

   access_to_goves: block_path {
      from = "jungle_ww"
      to="quiet_grove"
      block_when_not = has_visited_grove
      show_blocked_exit = false
   }

   east_cave_light: block_path {
      from = cliffs_e_cave_entrance
      to = cliffs_e_cave_rear
      block_when_not = lit_candle
      show_blocked_exit = true
      message = "It's too dark to proceed any further without a light source."
   }

   hidden_cliff: block_path {
     from = cliffs_e_clearing
     to = cliffside_east
     block_when_not = has_seen_cliff_steps
     show_blocked_exit = false
   }
   
   hidden_vines: block_path {
      from = cliffside_east
      to = cliffs_e_vine_top
      block_when = always
      show_blocked_exit = false
   }

   swim_to_ship: block_path {
      from = waters_edge
      to = shipwreck
      block_when_not = knows_to_swim
      show_blocked_exit = false
   }

   //block_jungle: block {
   //   location = jungle_edge
   //   message = Perhaps you should find some food and water
   // block_cave : block {
   //    location               = inside_cave
   //    message                = THE TROLL IS GUARDING THE CAVE.
   //    block_when_exists      = troll
   //    show_blocked_exit      = true
   // }

}


on_command {

   :match "help -" {
      :gosub "help";
   }

   :match "use *" {
      :print "Objects may not be \"used\". Please try a different verb.";
      :tutorial "For example, you might try:\n- <unlock chest<6>> instead of <use key<6>>\n- <light candle<6>> instead of <use match<6>>";
   }

   :match "tutorial off" {
     :set_false "tutorial_on";
     :tutorial "Tutorial turned off.";
     :done;
   }

   :match "tutorial on" {
     :set_true "tutorial_on";
     :tutorial "Tutorial turned on.";
     :done;
   }

   :if (is_carried("candle")) {
      :match "light candle" {
         :if (is_carried("matchbook")) {
            :print "You light the candle.";
            :set_true "lit_candle";
            :press_any_key;
            :redescribe;
         }
      }

      :match "blow candle" {
         :set_false "lit_candle";
      }
   }

   // manual aliases
   :if (is_beside("gold_coins")) {
      :match "get gold" {
            :get "gold_coins";
         }
      :match "look gold" {
         :examine "gold_coins";
      }
   }

   :if (is_beside("love_letters") || true) {
      :match "read letters; read poetry" {
         :print "You grab a letter and read:";
         :press_any_key;
         :print "^c^Brandy,";
         :pause "1000";
         :print "^c^you're a fine girl,";
         :pause "1000";
         :print "^c^what a good wife you would be,";
         :pause "1000";
         :print "^c^your eyes could steal this sailor from the sea,";
         :pause "1000";
         :print "^c^but my life,";
         :pause "1000";
         :print "^c^my lover,";
         :pause "1000";
         :print "^c^my lady...";
         :pause "1000";
         :print "^c^...is the sea.";
         :pause "1000";
         :print "\nYou blush and decide to read no more.\nYou never knew the Captain was such a lady's man.";
      }
   }

   :if (is_carried("matchbook")) {
      :match "light match" {
         :print "The match burns out almost as quickly as you light it.";
      }
   }

   :if (is_carried("matchbook")) {
      :if (is_at("western_heights")) {
         :match "light fire; set fire" {
            :if (!is_beside("chopped_driftwood")) {
               :print "You need more wood.";
               :done;
            }
            :if (!is_beside("chopped_oak")) {
               :print "You need more wood.";
               :done;
            }
            :if (!is_beside("chopped_darkwood")) {
               :print "You need more wood.";
               :done;
            }
            :if (!is_beside("love_letters") && !is_beside("charts"))
            {  
               :print "You'll need some sort of paper to get the fire started.";
               :done;
            }
            :destroy "chopped_driftwood";
            :destroy "chopped_oak";
            :swap o1="chopped_darkwood" o2="signal_fire";
            :if (is_beside("love_letters")) { :destroy "love_letters"; }
            :if (is_beside("charts")) { :destroy "charts"; }
            :gosub "win_game";
            :done;
         }  
      }

      :match "light fire; set fire" {
         :print "Why would you do that here?";
      }
   }

   :match "lol _" {
      :print "You laugh at loud, then wonder if you are starting to lose your mind.";
   }

   //:if (is_present("circle_stones") && is_wolf_awake) {
      //:match "look statue" {
      //   :print "The statue is gone.";
      //}
      //:done;
   //}

   :if (is_present("book") || is_present("moby_book")) {
      :match "read book" {
         :print "Great idea.";
         :print "You'll put that on your list; just as soon as you get off this island.";
         :print "<Achievement<2>>: Bookworm";
         :set_true "award_bookworm";
      }
      :match "look book" {
         :examine;
         :swap o1="book" o2="moby_book";
      }
   }

   :if (is_present("tome")) {
      :match "get tome" {
         :print "You cannot.  Some magic ties it to this place.";
      }
      :match "read tome" {
         : add_choice "a last stand" {
            :print "I prepare now to face the wizard with what little courage and magics I posess.";
            :print "...I fear both shall be insufficient.";
         }
         : add_choice "the wolf" {
            :print "The wolf is as old as time; protector of our people, guardian of the island and sacred grove.";
         }
         : add_choice "the wizard" {
            :print "This dark figure has many names and his tales would fill many books.";
            :print "The wizard tricked the wolf, gauged it's eyes (stealing it's powers), and then placed it into a dark, dreamless slumber.";
         }
         :add_choice "the sacred grove" {
            :print "There stands a wise, sacred tree in the center of the island that we worship.";
            :print "Surely the way to the grove will remain elusive to the wizard.";
         }
         : add_choice "my people" {
            :print "I do not know what has become of my people.";
            :print "I fear I will never know.";
         }
         : add_choice "a hero promised" {
            :print "Yet all of this was long ago foretold... also that one day a hero would come - to right the old wrongs.";
            :print "Seek the wolf... perhaps then the tree would offer guidance...";
         }
         : add_choice "nevermind" { 
            :redescribe;
            :done; 
         }
         : choose "read which section:";
      }
   }

   :if (is_present("wolf")) {
      :match "look wolf" {
         :examine "wolf";
         :print "<The wolf matches your stare until you look away.<13>>";
      }
      :match "ask wolf" {
         :print "What would you ask it?";
      }
      :match "talk wolf" {
         :print "You prepare your best friendly animal voice.";
         :print "\"Hey there wolfy boy. Lets be friends.\"";
         :print "<The wolf just stares at you without understanding.<13>>";
      }
      :match "pet wolf; hug wolf; touch wolf" {
         :print "It doesn't look like it's desiring your affection at the moment.";
         :done;
      }
   }

   :if (is_present("wolf_statue") || is_present("wolf_statue2")) {
      :match "look statue" {
         :examine;
         :swap o1 = "wolf_statue" o2="wolf_statue2";
         // :create "wolf_statue2";
         //:done;
      }
      :match "insert stone; insert eyes; place eyes; place stones; place marbles; add eyes; add stone" {
         :if (is_present("red_marble") && is_present("blue_marble")) {
            :print "The stone eyes lock into place - their color fading to a dull shade of gold. You suddenly feel as if you’re being watched.";
            :destroy "wolf_statue"; 
            :destroy "wolf_statue2"; 
            :create "wolf_statue3";
            :set_true "is_wolf_awake";
         }
      }
      :match "look eyes" {
         :print "The statue has no eyes, only empty sockets.  One socket is pale blue, the other a dark shade of red.";
      }
   }

   :if (!game_started) {
      :match "end tutorial" {
         // start game
         :set_true "game_started";
         :set_integer var="tutorial_progress" value="100";
         :print "Good luck.";
         :press_any_key;
         :set_true "dream_intro";
         :goto "dream_ship";
      }
   }

   :if (is_present("dead_seagull")) {
      :match "eat bird; cook bird; roast bird" {
         :print "You tear into the small, but delicious meal.";
         :print "<Achievement<2>>: Perseverance";
         :set_true "award_seagull";
         :success;
         :destroy "dead_seagull";
         :done;
      }
   }

   :if (is_present("seagull")) {
      :match "eat bird; cook bird; roast bird" {
         :print "Yum, but first you'd have to catch it...";
         :done;
      }
      :match "catch bird" {
         :failure;
         :print "The seagull flies further away and looks back at you.";
         :print "You imagine it laughing, daring you to chase it.";
      }
      :match "chase bird; run bird" {
         :print "You chase the seagull in circles...";
         :press_any_key;
         :failure;
         :print "...until finally you collapse from exhaustion.";
         :print "How could you get the jump on this darn seagull?";
      }
      :match "jump bird; pounce bird" {
         :print "You wait until it seems distracted then jump...";
         :press_any_key;
         :failure;
         :print "...landing flat on your face in the sand.";
         :print "Is this gull impossible to surprise?";
      }
      :match "surprise bird" {
         :print "You really wish you knew how.";
         :print "In a fair fight you could knock it out with a quick one-two punch.";
      }
      :match "hit bird; punch bird; box bird" {
         :print "You swing...";
         :press_any_key;
         :failure;
         :print "...and a miss. Perhaps throw something at it?";
      }
      :match "throw knife; toss knife" {
         :if (is_beside(s1()) || is_carried(s1())) {
            :print {( "You throw " + d(s1()) + " at the seagull..." )} ;
            :press_any_key;
            :store_random var = "temp_int";
            :print {( temp_int + "  " + kill_chance )};
            :if (kill_chance < temp_int) {
               :add var="kill_chance" value="5";
               :append "...and miss. ";
               :failure;
               :cycle key = "knife_misses" predictable_order = "false" skip_interval = "0"  {
                  :print "But it was so close!" ;
                  :print "Surely next time." ;
                  :print "Never give up, never surrender." ;
                  :print "You give yourself a pep talk.";
                  :print "You should have tried harder for your boyscout hunting badge.";
                  :print "Grrr!" ;
                  :print "Ungh!" ;
                  :print "Darn!" ;
               }
               :print "The seagull is no longer amused.";
            } : else {
               :print "...and your blade flies true.";
               :success;
               :swap o1="seagull" o2="dead_seagull";
            }
            :done;
         }
      }
      :match "throw *; toss *" {
         :print {( s1())};
         :if (is_beside(s1()) || is_carried(s1())) {
            :print {( "You throw " + d(s1()) + " at the seagull." )} ;
            :print "The seagull looks amused.";
            :done;
         }
      }
   }


   :if (is_at("jungle_edge")) {
      :match "north _" {
         :if (hunger > 50 || thirst > 50 ) {
            :if (thirst > 50) {
               :print "You're dying of thirst.\nYou really should find some water before venturing deeper inland.";
            } :else {
               :print "You're starving.\nYou really should find some food before venturing deeper inland.";
            }
         }
      }
   }

   :if (is_present("coconut_trees")) {
      :match "shake tree;shake trees; wiggle tree; wiggle trees" {
         :print "You give it a good shake.";
         :create "coconut";
      }
   }
   :if (is_present("coconut")) {
      :match "crack coconut" {
         :print "Your grand-daddy never taught ya that one.\nYou always just cut into them with your trusty knife.";
      }
      :match "eat coconut" {
         :if (is_carried("knife")) {
            :print "You cut into the coconut with your knife.\nDelicious.";
            :set_integer var ="hunger" value="0";
         } :else {
            :print "You need some way to cut into the coconut.\nSomething sharp?";
         }
      }
   }

   :match "get wheel" {
      :if (is_present "ships_wheel") {
         :print "It's far to large to just carry around.\nBesides, what would you need it for?";
      }
   }
   :match "get wood; get driftwood" {
      :if (is_present "driftwood") {
         :print "It's too large to carry as it is.\nYou need to break it into smaller pieces first.";
      }
   }
   :if (is_carried "axe") {
      :match "chop wheel; chop wheel; split wheel" {
         :if (is_present "ships_wheel") {
            :print "You shed a tear as you chop.";
            :destroy "ships_wheel";
            :create "chopped_darkwood";
         }
      }
      :match "chop chest; split chest; axe chest" {
         :if (is_present("chest")) {
            :print "That might damage it's contents! Perhaps open it first?";
         }
         :if (is_present("open_chest")) {
            :print "You chop the chest into a neat pile of wood.";
            :destroy "open_chest";
            :create "chopped_oak";
         }
      }
      :match "chop wood; split wood; axe wood" {
         :if (is_present "driftwood") {
            :destroy "driftwood";
            :create "chopped_driftwood";
            :print "You chop the wood into smaller pieces.";
         }
      }
   }

   // opening the chest

   :if (is_present("open_chest")) {
      :match "lock chest; close chest" {
         :print "Why bother?";
      }
   }
   :if (is_present("chest")) {
      :match "open chest" {
         :print "It's locked.";
      }
      :match "unlock chest" {
         :if (!is_carried("chest_key")) {
            :print "You'll need the key.";
            :done;
         }
         :print "You insert the key.  It turns hesistantly, with a final loud click as the mechanism unlocks.";
         :press_any_key;
         :create "love_letters";
         :create "gold_coins";
         :create "matchbook";
         :swap o1="chest" o2="open_chest";
      }
      :match "hit chest; whack chest; break chest; smash chest" {
         :if (is_carried("oar")) {
            //:print "You give it a good hard whack with the oar.";
            :cycle key = "hit_chest" predictable_order = "true" skip_interval = "0" max_loops="1"  {
               :print "You give it a good hard whack with the oar.\nNothing. But perhaps you didn't swing hard enough?";
               :print "You swing harder.\nThat's it, it looks like perhaps it's giving.";
               :print "Third time's the charm.\nThe oar cracks in two.";
            }
            :increment "oar_hit_chest_count";

            :if (oar_hit_chest_count > 2) {
               :destroy "oar";
               :create "broken_oar";
               :redescribe;
            }
         } :else {
            :if (is_carried("broken_oar")){
               :print "Again? Seriously?";
            } :else {
               :print "You hit it as hard as you can.\nYour hand hurts.";
            }
         }
      }
   }

   // lost in the jungle

   :match "follow wolf" {
      :print "<With one last look at you, the wolf plunges into the jungle.<13>>\n You rush after and are hopefully lost in only minutes.";
      // :goto "quiet_grove";
      // :create "wolf";

      :set_integer var = "lost_jungle_counter"  value = "0" ;
      :goto "lost_jungle";
   }

   :if (is_at("lost_jungle")) {
      :match "n _; s _; e _; w _" {
         // : print "You are still hopefully lost.";

         : increment "lost_jungle_counter" ;
         : cycle key = "lost_events" predictable_order = "true" skip_interval = "0"  {
            : print "You are so very lost." ;
            : print "Every tree looks the same." ;
            : print "Wait, that Y shaped tree looks familiar." ;
            : print "Nope, just your imagination." ;
            : print "You are afraid." ;
         }
         :if (lost_jungle_counter>5) {
            :goto "quiet_grove";
            :create "wolf";
         }
         : press_any_key ;
         : redescribe;
      }
   }

   // quiet grove

   :if (is_at("quiet_grove")) {

      :match "talk tree; speak tree" {
         // :print "<...<14>>";
         :print "You have a feeling it's already listening.\nWhat would <ask<8>> of it?";
      }
      :match "ask tree" {
         :print "Ask it what?";
         :tutorial "Try <ask (subject)<6>> such as <ask weather<6>>.";
         :done;
      }
      :match "ask _" {
      : cycle key = "woods_events" predictable_order = "false" skip_interval = "0"  {
            : print "Wind whistles thru the branches." ;
            : print "Leaves rustle softly." ;
            : print "A gentle breeze; the branches dance." ;
            : print "The leaves whisper softly.";
            : print "Branches click and rattle in the wind.";
            // : print "You are afraid." ;
         }
      }
      :match "ask life" {
         :print "<fourty two<14>>"; :done; }
      :match "ask wisdom; ask patience; ask truth" {
         :print "<good<14>>"; :done; }
      :match "ask fire; ask earth; ask wind; ask water" {
         :print "<elemental<14>>"; :done; }
      :match "ask love" {
         :print "<magic. deep.<14>>"; :done; }
      :match "ask acorn" { :print "<help. plant, you must.<14>>";  :done; }
      :match "ask help" {
         :print "<...<14>>";
         :print "An acorn falls to the ground.";
         :create "acorn";
         :done; 
      }
      :match "ask flower; ask flowers" {
         :print "<for others<14>>"; :done; }
      :match "ask island" {
         :print "<here<14>>"; :done; }
      :match "ask treasure; ask gold; ask money" {
         :print "<greed. sad.<14>>"; :done; }
      :match "ask wolf; ask dragon" {
         :print "<old ones<14>>"; :done; }
      :match "ask wizard" {
         :print "<evil one<14>>"; :done; }
      :match "ask people" {
         :print "<wizard slaves<14>>"; :done; }
      :match "ask ship; ask shipwreck" {
         :print "<brings hero<14>>"; :done; }
      :match "ask age" {
         :print "<long. ago. time.<14>>"; :done; }
      :match "ask name; ask self; ask god; ask why" {
         :print "<... ...<14>>";
         :done;
      }
      :match "ask _" {
         :print "...";
      }

      :match "take flower; pick flower; get flower" {
         :print "<The wolf growls as you reach towards a flower.<13>>";
         :print "You reconsider.";
      }
   }

   // :match "inv _" {
   //    :inventory;
   //    // buffs
   //    :append "buffs: ";
   //    :if (is_worn("medallion")) {
   //    :print "<luck<12>>";
   //    }
   // }
   :if (is_carried("medallion")) {
      :match "wear medallion" {
         : wear "medallion" ;
         : print "You shiver, but suddently feel quite a bit luckier.";
      }
   }

   //:match "remember ship" {
   //   :print "You close your eyes.";
   //   : press_any_key ;
   //   :goto "remember_ship";
   //}

   // custom object interactions

   :if (is_present("shadow_bear")) {
      :match "look bear" {
         :print "Nope, just a shadow.";
         :destroy "shadow_bear";
      }
   }
   :if (is_present("pool")) {
      :match "drink water; drink pool" {
         :set_integer var = "thirst"  value = "0" ;
         :print "You didn't know water could taste this good.";
      }
   }
   :if (is_present("logbook")) {
      :match "read log" {
         :print "Last entry:";
         :print "I worry we were deceived - that we will never find this dreaded island. Worse, I fear what might be waiting for us if we do.";
      }
   }

   :if(is_present "pile_stones") {
      //:match "look stones" {
      //   :if (! is_exists "medallion") {
      //      :print "You notice something shiny at the base of the pile.";
      //      :create "medallion";
      //   }
      //}
      :match "look stone" {
         :if (!is_carried("stone")) {
            :print "You examine one stone.  It's a rock.";
         }
      }
      :match "get stones" {
         :print "No way you're going to carry them all.";
      }
      :match "get stone" {
         :print "You pocket one of the stones.";
         :pocket "stone";
      }
   }

   : if (is_present "msg_bottle") {
      :match "throw bottle;toss bottle" {
         :print "You throw the bottle far out to sea.";
         :destroy "msg_bottle";
      }
      :match "read bottle" {
         :print "It has no label.";
         :tutorial "Did you perhaps mean <read message<6>>?";
      }
      :match "read message" {
         :set_true "award_message_in_a_bottle";
         :print "It reads:\n  \"Trapped on an island. Send help.\"";
         :success;
         :print "<Achievement<2>>: Message In a Bottle";
         :press_any_key;
      }
   }

   : if (is_present "seashell") {
      :match "listen seashell" {
         : print "You hear ocean waves.";
      }
   }

   // dream intro

   :if (dream_intro) {
      :match "give up" {
         : set_integer var = "until_wave"  value = "1" ;
      }
   }

   // help

   :match "help directions; help dir" {
      :tutorial "<north<12>> and <south<12>> are opposites, as are <east<12>> and <west<12>>.  return to <water's edge<12>> using <south<6>>.";
      :tutorial "<__<0>>N\rW + E\n<__<0>>S";
   }

   :match "stat _" {
      : if (thirst > 50) {
         :print "- you are thirsty";
      }
      : if (hunger > 50) {
         :print "- you are hungry";
      }
   }

   // zones

   :if (is_at("beach_zone")) {
      :match "look sand" {
         :print "Your average everyday tropical island sand, and plenty of it.";
      }
   }

   // catch alls

   :match "achievements _; achieve _" {
      :gosub "achievements";
   }

   :match "wearing -" {
     :gosub "wearing";
   }
   
   :match "clear -" { :clear_screen; }
   :match "goals - " { :gosub "goals"; }

   :match "touch yourself" {
      :print "Perhaps later?";
      :done;
   }

   :match "touch _" {
      :if (is_present(s1())) {
         :print "You feel nothing unexpected.";
      } :else {
         :print "I'm not sure what you're referring to.";
      }
   }

   :match "eat _" { :print "Are you sure that's edible?"; }

   :match "about -; credits -" {
      :print "TODO: credits here";
   }

   // mend, fix, repair
   


   // fun utils

   :match "stats -" { :gosub "stats"; }
   :match "whoami -" { :print "Jim Hawkins"; }
   :match "version -" { :print "0.2 beta"; }

}

// on_describe {
// : print "sand in mouth";
// }

// on_pre_describe {
// }

######################################
#  On Tick                       #
######################################

on_tick {
  // DEBUG
  :if (is_debug) {
    :print {( "linger" + linger() )};
  }

  // booleans
  :if (is_present("wolf")) { :set_true "has_seen_wolf"; }
  :if (is_at("quiet_grove")) { :set_true "has_visited_grove"; }

  // ****************
  //  chase the wolf

  :if (is_present("wolf") && is_at("cliffs_e_clearing") && linger() > 4 ) {
    :print "<The wolf looks at you, then darts off to the north<13>>";
    :destroy "wolf";
    :create "wolf" target="cliffs_e";
  }

  :if (is_present("wolf") && is_at("cliffs_e") ) {
    :match "look wolf" {
      :print "<The wolf looks back at you, then lopes off to the west<13>>";
      :destroy "wolf";
      :create "wolf" target="jungle_ee";
    }
  }

  :if (is_present("wolf") && is_at("jungle_ee") ) {
    :print "<The wolf gazes off into the jungle then back, as if asking you to follow.<13>>";
      //:destroy "wolf";
      //:create "wolf" target="jungle_ee";
   }
   
  // wolf

  :if (is_at "cliffs_e") {
    :if (is_wolf_awake && ! has_seen_wolf) {
      :print "You hear a loud noise to the south.";
      :destroy "wolf_statue3";
      :create "wolf_statue4" target="cliffs_e_clearing";
      :create "wolf" target="cliffs_e_clearing";
      :press_any_key;
    }
  }

   : set_string var = "lost_jungle_desc"  text = "Wind whistles thru the branches." ;

   :if (is_just_entered() ) {
      : cycle key = "lost" predictable_order = "false" skip_interval = "0"  {
         : set_string var = "lost_jungle_desc"  text = "The jungle here is a tangle of confusing branches and paths." ;
         : set_string var = "lost_jungle_desc"  text = "" ;
         : set_string var = "lost_jungle_desc"  text = "" ;
         : set_string var = "lost_jungle_desc"  text = "";
         : set_string var = "lost_jungle_desc"  text = "";
         // : print "You are afraid." ;
      }
   }

  // NPC behavior (handled in on tick)

   :if (is_at("quiet_grove")) {
      :match "look flowers" {
         :mask {
         :print "<The wolf's gaze follows you.<13>>";
         }
      }
   }

   // TUTORIAL
  :if (tutorial_on) {

    // tiny help here and there
    :if (is_present("coconut_trees")) {
      :match "look trees" {
          :tutorial "Perhaps you could <shake<6>> the trees? IE: <shake trees<6>>";
      }
    }

    :if (tutorial_progress==5) {
      :tutorial "You'll notice that most commands are entered as <VERB NOUN<8>> pairs - like \"drop book\" or \"swim river\", but not all.\nTry <north<6>> or just <n<6>> to move north.";
    }



      // tutorial, step 0 

      :if (is_at("washedashore")) {
         :match "north _" {
            :if (tutorial_progress == 0) {
               :increment "tutorial_progress";
            }
            :tutorial "Yikes - that normally works. You're in worse shape than I thought.\nTry <crawl north<6>> instead.";
         }
      }


      // we use thirst to know to trigger the "first arrival"
      //: if (is_at "washedashore" && thirst ==0 ) {
      //   : set_integer var = "thirst"  value = "50" ;
      //   :tutorial "You really should get out of that cold water.\nType <north<6>> or <n<6>> to move north.";
      //}

      //: if (is_at "beach" && is_just_entered()) {

         // :tutorial "Glad you're still with us.\nType <help directions<6>> to learn about directions.";
      //}

      // they figured it out
      :if (is_at("beach") && tutorial_progress == 0) {
         :increment "tutorial_progress";
      }

      : if (tutorial_progress==0) {
         :tutorial "You really should get out of that cold water.";
         :tutorial "Type <go north<6>>, <north<6>>, or even just <n<6>> to move north.";
         //:tutorial "Use <look<6>> to look at things to learn more. \nType <look table<6>> or <look magazine<6>>.";
      }

 
      :if (is_at("beach") && tutorial_progress==1) {
         :match "look debris" {
            :set_true "tut_look_debris";
         }
         :match "look gull" { :set_true "tut_look_gull"; }
         :match "eat gull" { :set_true "tut_eat_gull"; }
         :match "catch gull" { 
            :set_true "tut_catch_gull"; 
            :tutorial "Exactly, I think you have the idea!";
         }
         :match "look -" {
         :set_true "tut_look_around"; 
            :increment "tutorial_progress";
         }

         :if (!tut_look_debris) {
            :tutorial "Glad you're still with us.";
            :tutorial "Lets have a look around. Try <look debris<6>>.";        
         }
         :else_if (!tut_look_gull) {
            :tutorial "Try <look seagull<6>>.";
         } 
         :else_if  (!tut_eat_gull) {
            :tutorial "Sometimes actions won't be obvious, or may only be hinted at.";
            :tutorial "Try <eat gull<6>>.";
         }
         :else_if (!tut_catch_gull) {
            :tutorial "And perhaps that would suggest <catch bird<6>>...";
         }
         :else_if (!tut_look_around) {
            :tutorial "Type just <look<6>> by itself to redescribe your current location.";
         }
         // :tutorial "Not everything you can look at will be listed - remember those blue walls?\nType <look walls<6>>.";
      }

      // beach part 2 (look sand, go south)
      :if (tutorial_progress==2) {
         :match "south _" { :increment "tutorial_progress"; };
      }

      :if (is_at("beach") && tutorial_progress==2) {
         :match "look sand" { :set_true "tut_look_sand"; };
        
         :if (!tut_look_sand) {
            :tutorial "You can often look at things not in the 'you see' list as well.\nPay attention when reading room descriptions.";
            :tutorial "For example, try <look sand<6>>.";
         }
         :else {
            :tutorial "North is the opposite of south, as east is the opposite of west.\nType <south<6>> to return to where you washed ashore.";
         }
      }

      //:print {("tutorial progress " + tutorial_progress)};

      // tutorial 3, waters edge, using items
      :if (is_at "waters_edge" && tutorial_progress==3) {
         :match "look _" {
            :tutorial "Using <look<6>> alone just repeats the location description.\nTry <look knife<6>> or <look seashell<6>>";
         }
         :match "look knife" {
            : if (is_beside "knife") {
               :tutorial "Seems useful, and vaguely familiar.  \nType <get knife<6>> to pick it up.";
            }
         }
         :match "get knife" {
            :tutorial "Great! Now what about that seashell?";
         }
         :match "get shell" {
            :tutorial "Awesome, now try <i<6>> or <inventory<6>> to see what you're carrying.";
         }
         :match "drop seashell" {
            :tutorial "I believe you have the hang of it!";
            :tutorial "I'm still here, but you'll hear very little from me from this point forward.";
            :increment "tutorial_progress"; // to 4
         }
         :match "inventory _" {
            :tutorial "Notice that some items can also be worn, such as pants.";
            :if (is_carried("seashell")) {
               :tutorial "But do you really need a seashell? Set it back down with <drop seashell<6>>.";
            }
         }
      }
      :if (is_at "waters_edge" && is_just_entered() && tutorial_progress==3) {
         :tutorial "From here north would return to the Beach. But first lets have a <look<6>> around.\n";
      }
   }

   // TUTORIAL
   //
   // [x] movement
   // [x] get/drop
   // [x] looking
   // [x] two word parser



 

   // dream & intro


   :if (dream_intro) {
      : increment "dream_counter" ;
      : decrement "until_wave" ;

      : if (is_at "dream_ship" && dream_counter > 2) {
         // : print_graphic "storm";
         :cycle key = "wave" predictable_order = "false" skip_interval = "0" max_loops="1"  {
               : print "You feel ill." ;
               : print "You think you hear the terrifying roar of a leviathan." ;
               : print "The frigid wind whips through your hair." ;
               : print "In the distance you hear crashing waves." ;
               : print "The ship violently rocks to and fro.";
               : print "If there was ever a time for prayer...";
               : print "The ship lurches from side to side, almost as if possessed.";
               : print "The ship groans and strains, trying to avoid being torn apart.";
               : print "You are afraid.";
               : print "You fear you may never see your beloved Brandy again.";
               : print "You hear a fellow crewmate cry out in the night.";
               : print "You really wish you'd used the bathroom earlier when you had the chance.";
               : print "You imagine the ship being torn apart.";
            }
      }

      : pause "250";
      : print "...^n^ {until_wave} ...";
      : pause "250";

      :if (until_wave == 0) {
         : set_integer var = "until_wave"  value = "255" ;
         : set_false "dream_intro";

         : press_any_key ;
         : clear_screen;
         : print "At the last moment you close your eyes and attempt to find your happy place - hoping to drown out the terrible noise of the boat splitting in two and the terrified screams of the crew.";
         : print "Sadly, you fail, but mercifully the darkness soon claims you...";
         // : failure ;
         : beep millis="200" pitch="0";
         : beep millis="200" pitch="-3";
         : beep millis="200" pitch="-8";
         : beep millis="500" pitch="-15";
         : press_any_key ;
         :goto "washedashore";
         : redescribe;
         :done;
      };

   }

   :match "x _" {
      :if (is_worn(s1())) {
         :print "You are wearing it.";
      }
   }

  :gosub "track_inputs";
  :gosub "update_status_effects";

   :match "wiz end" {
      :gosub "cutsceen_grove_destroy";
   }

   :match "look tree" {
      :gosub "cutsceen_plant_acorn";
   }

}


subroutines {
  goals : subroutine {
   :print "GOALS";

  }
  stats : subroutine {
   :print "STATS";
   :print {( "- turns " + turns()  )};
   :print {( "- ticks " + ticks()  )};
  }

  cutsceen_signal_fire : subroutine {
   :if (cutsceen_signal_fire_seen) { :done; }
   :set_true "cutsceen_signal_fire_seen";

   :set_true "award_signal_fire";
   :print "<Achievement<2>>: Smoke Signal";
   :success;

   :press_any_key;
  }

  cutsceen_plant_acorn : subroutine {
   :if (cutsceen_plant_acorn_seen) { :done; }
   :set_true "cutsceen_plant_acorn_seen";

   :print "<You suddenly remember the acorn.<13>>";
   :print "Kneeling down you dig a small hole and gently plant the acorn.";
   :print "Was this somehow all part of a grand master plan?";
   :print "Were you an ally of the grove or an unwitting pawn of the wizard...";
   :press_any_key;
   :print "...both?";
   :print "...neither?";

   :set_true "award_acorn";
   :print "<Achievement<2>>: Kings or Pawns";
   :success;

   :press_any_key;
   :print "Looking up you notice the wizard's bloodwood staff laying nearby, broken into 3 pieces.";
   :print "<A thought leaps unbidden into your mind.<13>>";
   :print "Imagine the good one might do with even but a fraction of the wizard's powers.";
   :print "You whistle idly as you carefully collect the staff pieces.";
   :print "A short time later you leave the grove feeling confident of rescue and a long life.";
  }

  cutsceen_grove_destroy : subroutine {
   :if (cutsceen_grove_destroy_seen) { :done; }
   :set_true "cutsceen_grove_destroy_seen";

   :print "A dark robed figure stands before the ancient tree.";

   :print "<The wizard laughs maniacly.<13>>";

   :print "\"So very foolish.  Millinnia have I slept, waited, and dreamed.  A human?  You make it all too easy.  The grove - so long hidden from my all-seeing eyes.  I had only to follow the human stink.\"";

   :print "<The wizard raises his bloodwood staff.<13>>";

   :print "“What began long ago, today I conclude.”";

   :print "<The wizard recites words of power.<13>>";
   :print "Red fire rains down, engulfing the massive tree. The ground shakes and you are thrown backwards into the jungle.";

   :press_any_key;
   :print "The ground shakes again and you hear a vicious growl as you lose consciousness.";
   :press_any_key;

   :goto "jungle_ww";
   :redescribe;
  }

  achievements : subroutine {
   :print "^c^✜ ACHIEVEMENTS ✜";

   // trying to read everything
   :append "{ award_bookworm ? ` Bookworm. ` }";
   // reading the message in the bottle
   :append "{ award_message_in_a_bottle ? ` Message in a bottle. ` }";
   // praying during the storm
   :append "{ award_god_fearing ? ` God-fearing. ` }";
   // eat the darn seagull
   :append "{ award_seagull ? ` Perseverance. ` }";
   // plant the acorn
   :append "{ award_acorn ? ` Kings or Pawns. ` }";
   // light the signal fire
   :append "{ award_signal_fire ? ` Smoke Signal. ` }";

   :print "\n^c^---";
  }

  win_game : subroutine {
   //:pause "800" ;
   //:print "^c^2..." ;
   //:pause "800" ;
   :print "^c^YOU HAVE WON THE GAME!" ;
   :print "STATS";
   :print {( "- You entered " + total_inputs + " words.")}
   :print {( "- You solved " + side_quests_complete + " side quests.")}
   :win_game ;
  }

  help: subroutine {
      : print "- type '<LOOK<#ec9>>' or '<LOOK<#ec9>> <thing<#8ad>>' to examine clues.";
      : print "- type '<I<#ec9>>' to see what you are holding (and wearing).";
      : print "- type '<GET<#ec9>> <thing<#8ad>>' to pick up an item.";
      : print "- type '<DROP<#ec9>> <thing<#8ad>>' to drop or place an item.";
      : print "- type '<ACHIEVE<#ec9>>' to see your game achievements.";
      : print "- type '<STATS<#ec9>>' to see game stats (moves, etc).";
      : print "- type <N<#ec9>>, <S<#ec9>>, <E<#ec9>>, <W<#ec9>>, <UP<#ec9>>, <DOWN<#ec9>>, etc to move.";
      : if (tutorial_on == false) {
            : print "- type '<TUTORIAL ON<#ec9>>' to turn tutorial hints on.";
      }
      : if (tutorial_on == true) {
            : print "- type '<TUTORIAL OFF<#ec9>>' to turn tutorial hints off.";
      }
      //: print "- type '<SETTINGS<#bbb>>' for robot settings.";
      //: print "- type '<SOUND<#bbb>>' for sound settings.";
      //: print "- type '<LOAD<#ec9>>' or '<SAVE<#ec9>>' to load or save a game.";
      : print "- type '<QUIT<#ec9>>' to restart a game.";
  }
  
  ask_tutorial: subroutine {
   :print "\n\n\n";
   :tutorial "Hello, I'm your friendly tutorial. I'll help you learn how to play if you're new to text adventure games.";
   :tutorial "You can shut me up at any time with <TUTORIAL OFF<6>>, so if you're on the fence, perhaps let me try to help?";
   :ask_bool {
         var = "tutorial_on"
         question = Enable the learning tutorial? <(recommended)<10>>
         yes_answer = YES
         no_answer = NO
      }
  }

  title_screen: subroutine {
    :print "<Lost Island<14>>";
    :print "by Josh Goebel";
    :print "© 2022";
    :press_any_key;
  }

  bootup: subroutine {
    :create "your_earing" target="inventory";
    :create "your_pants" target="inventory";
    :wear "your_earing";
    :wear "your_pants";
  }

  update_status_effects: subroutine {
    :set_string var="status" text="";
    :set_false "has_status";

    :if (thirst > 50) {
      :set_true "has_status";
      :set_string var="status"  {(
        status + "<thirsty<2>>"
      )}
    }
    :if (hunger > 50) {
      :if (has_status) {
        :set_string var="status"  {( status + " " )}
      }
      :set_true "has_status";
      :set_string var="status"  {(
        status + "<hungry<2>>"
      )}
    }
  }

  track_inputs: subroutine {
    :add var="total_inputs" value="2";
  }

  wearing: subroutine {
      // : append "You\'re holding:\s" ;
      // : look_inside of="inventory" extract_the="description" store_results_in="tmp_list" show_worn="false";
      // : print_list_verbose  "tmp_list" lead_in="" /;
      : append "wearing:\s" ;
      : look_inside of="inventory" extract_the="description" store_results_in="tmp_list" show_unworn="false" add_worn_suffix_if_applicable="false" ;
      : print_list_verbose  "tmp_list" lead_in="" ;

      : look_inside {
         of               = inventory
         extract_the      = id
         store_results_in = tmp_list
      }
      : print "wearing: ";
      : collection_iterate "tmp_list" {
         :if (is_worn(item())) {
            : append {( "- " + d(item())  )}
         }
      }
  }
}
